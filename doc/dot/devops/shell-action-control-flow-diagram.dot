digraph {
 
 // styles
 label=" \n control flow in shell actions' execution \n";  
 node[style="filled,rounded",color=cornflowerblue,fontcolor=white, fontsize=12];
 edge[color=maroon,dir="both",arrowsize=.6 ,len=2.0];

 // declarations
 crl_entry[shape="circle", label="action \n entry \n point"];
 box_dispatcher[shape="box", label=" dispatcher "];
 crl_stop1[shape="circle",label="stop \n the \n action"];
 dmd_if_valid_entry[shape="diamond",label=" valid \n entry ?!"]; 
 box_controller1[shape="box", label="  Controller \n Ctrl<<Name>> "];
 box_reader[shape="box", label="  Reader \n Rdr<<Name>> "];
 dmd_if_read_ok[shape="diamond",label=" data read \n ok ?!"]; 
 box_converter[shape="box", label="  Converter \n Cnr<<Name>> "];
 crl_stop2[shape="circle",label="stop \n the \n action"];
 box_controller2[shape="box", label="  Controller \n Ctrl<<Name>> "];
 box_writer[shape="box", label="  Writer \n Wtr<<Name>> "];
 crl_stop3[shape="circle",label="stop \n write \n error "];
 crl_stop4[shape="circle",label="stop \n OK  "];
 dmd_if_write_ok[shape="diamond",label="  data write \n ok ?! "]; 

 // connections
 crl_entry->dmd_if_valid_entry[label="  validate \n action \n input "];
 dmd_if_valid_entry->crl_stop1 [label= "  no  "];
 dmd_if_valid_entry->box_dispatcher[label="  yes          "];
 box_dispatcher->box_controller1[label="  dispatch \n  correct \n ctrl func  "];
 box_controller1->box_reader[label="  read \n  the source \n  data"];
 box_reader->dmd_if_read_ok[label="  read "];
 dmd_if_read_ok->crl_stop2 [label= "  no  "];
 dmd_if_read_ok->box_converter[label="  yes          "];
 box_converter->box_controller2[label="  return to \n controller"];
 box_controller2->box_writer[label="  write \n  the converted \n  data"];
 box_writer->dmd_if_write_ok[label = "   write \n  to writer \n  media"];
 dmd_if_write_ok->crl_stop3 [label= "  no  "];
 dmd_if_write_ok->crl_stop4[label="  yes          "];

} //eof digraph
