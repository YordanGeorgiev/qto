Vue.component('vue-select', {
    template: "#vue-select-tmpl"
  , props: {
    filterable: true
    , itemname: ''
    , hook: ''
    , id: ''
  }
  , data: function(){
    return { 
      options: []
      , selected: ''
      , pxlsWidth: 160
      , url: '/<%= $db =%>/select-col/'
      }
  }
  , mounted(){
   this.loadData()
  }
  , methods: {
     getUrlParams: function (){
      var urlPrms = new URLSearchParams();
      if( window.location.toString().indexOf("?") != -1) {
         var href_part = window.location.search.split('?')[1].split('#')[0]
         href_part.replace(/([^=&]+)=([^&]*)/g, 
            function(m, key, value) {
               var attr = decodeURIComponent(key)
               var val = decodeURIComponent(value)
               urlPrms.append(attr,val);
         });
      } 
      return urlPrms ; 
    }
    , handlers: (map, vm) => ({
			//  tab
			9: e => this.onTab()
			//  enter
			, 13: e => {
				 e.preventDefault();
				 return this.typeAheadSelect();
			}
			//  esc
			, 27: e => this.onEscape()
			//  up
			, 38: e => {
				 e.preventDefault();
				 return this.typeAheadUp();
			}
			//  down
			, 40: e => {
				 e.preventDefault();
				 return this.typeAheadDown();
			}
    })
    , loadData(){
      var k = '<%= $db =%>' + '.' + this.itemname

      // gotcha !!! localStorage is cleared ONLY on the login page ...
      if ( localStorage.getItem(k) === 'undefined' || localStorage.getItem(k) === null 
            || localStorage.getItem(k) === "null" || localStorage.getItem(k).length === 0) {
         urlPrms = this.getUrlParams()
         axios.get( this.url + this.itemname, {params: {"pg-size": "2000","oa": "name","pick":"guid,name"}})
         .then(res => {
            this.options = res.data.dat
            var cachedData = JSON.stringify(res.data.dat)
            localStorage.setItem(k,cachedData)
            res.data.dat.forEach(el => { if ( el.guid === this.hook){
               this.selected = el.name 
               }
            });
         });
      } else {
         var cachedData = JSON.parse(localStorage.getItem(k))
         this.options = cachedData
         this.options.forEach(el => { if ( el.guid === this.hook){
            this.selected = el.name 
            }
         });
      }
    }
    , setSelected(optionItem) {
      if ( optionItem == null || typeof(optionItem) === "undefined") {
         this.selected = ""
         return 
      }
      this.selected = optionItem
      this.options.forEach(el => { 
         if ( el.name === optionItem.name ){
            this.$parent.updateItem(optionItem.guid,this.id,optionItem.guid);
         }
      })
    }
    , onSearch(search, loading){
      loading(true);
      if ( String(search).length > 1 ) {
         this.loadFilteredData(loading, search)
      }
      loading(false);
    }
    , loadFilteredData(loading, search) {
         axios.get( this.url + this.itemname, {params: {"pg-size": "2000","oa": "name","like-by":"name","like-val":search}})
         .then(res => {
           this.options = res.data.dat
         });
    }
  }
  , components: {
    'v-select': VueSelect.VueSelect,
  }
});
