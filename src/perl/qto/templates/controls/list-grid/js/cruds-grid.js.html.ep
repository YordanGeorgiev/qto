   var gruds_crid = new Vue({
     el: '#cruds-grid',
     data: {
        globalSrch: ''
      , gridColumns: <%== $list_control =%>
      , gridData: []
      , gridMeta: []
      , pageSize: 7
      , pageNum: 1
      , pagesCount: 0
      , UrlParams:{ as:"grid" }
      , pageSizes: ['5', '7', '10','15','20','30','50','100']
      , searchInputChanged: ""
		},
     	methods: {
       onSearchBoxInputChanged: function(quickSrch) {
            this.globalSrch = quickSrch ; 
        } 
      , inpQuickSrchCH: function(event) {
           if ( event ) {
               if ( document.getElementById("inp_srch_box").value !== "" ) {
                  document.getElementById("btnNew").setAttribute( 
                     "class" , "v-btn v-btn--floating theme--dark silver");
               } else {
                  document.getElementById("btnNew").setAttribute( 
                     "class" , "v-btn v-btn--floating theme--dark indigo");
               }
           } 
         }
         , getUrlParams: function (){
            var url_params = new URLSearchParams();
            if( window.location.toString().indexOf("?") != -1) {
               var href_part = window.location.search.split('?')[1].split('#')[0]
               href_part.replace("pick=","pick=id,").replace('id,id','id').replace(/([^=&]+)=([^&]*)/g, 
                  function(m, key, value) {
                     var attr = decodeURIComponent(key)
                     var val = decodeURIComponent(value)
                     url_params.append(attr,val);
               });
            } 
            
            if ( url_params.has("od") === false) { url_params.append("od" , "id"); }
            if ( url_params.has("as") === false) { url_params.append("as" , "grid"); }
            if ( url_params.has("pg-size") === false) { url_params.append("pg-size" , 7); }
            if ( url_params.has("pg-num") === false) { url_params.append("pg-num" , 1); }
            
            //debug for(var pair of url_params.entries()) { consolas.log(pair[0]+ '->'+ pair[1]); }
            return url_params ; 
         }
	      , fetchServerSideData: function (url_params){
            if ( typeof url_params === "undefined" ) { url_params = this.getUrlParams()  }

            var toReplace = ( url_params.has("bid") == false) ? "/select/" : "/hlselect/" //it-190205084244
            return axios.get(window.location.pathname.replace("/list/" , toReplace ) , { params: url_params } )
            .then(response => { 
               return response ; 
            })
            .catch(function(error) {
               console.log ( error ) 
               return error.response;
            }) 
         }
         , generatePageSize: function (pgSize) {
               var curi = window.location.href ; 
               if ( curi.indexOf("?") === -1 ) { curi = curi + '?' }
               if ( typeof pgSize === 'undefined' ) { pgSize = 7 }
               if ( curi.indexOf("pg-size=") === -1 ) {
                  return curi + "&pg-size=" + pgSize ; 
               } else {
                  return curi
                     .replace("pg-size=" + this.pageSize , "pg-size=" + pgSize) 
                     .replace("pg-num=" + this.pageNum , "pg-num=1");
               }
         }
         , fetchServerSideDataToUI: function(url_params) {

            if ( typeof url_params === "undefined" ) { url_params = this.getUrlParams()  }

            this.fetchServerSideData(url_params)
            .then( response => {
               if ( response.status === 204 ) {
                  var warningMsg = response.statusText
                  setMsgVisuals(warningMsg,'div_notice','Warning');
                  return ;
               } else if ( response.status === 404 || response.status === 400) {
                  var errorMsg = response.statusText + ": " + response.data.msg
                  setMsgVisuals(errorMsg,'div_msg','Error');
                  return ;
               } else {
                  var data = response.data
                  var dataType = (typeof data)
                  if ( dataType === 'undefined' ) {
                     var msg = 'unexpected error occurred while fetching data !!!'
                     setMsgVisuals(data)
                  } else {
                     this.gridData = data.dat
                     this.gridMeta = data.met
                     var totalRSsize = data.cnt ; 
                     this.pageSize = url_params.get('pg-size');
                     this.pageNum = url_params.get('pg-num');
                     var remainder = totalRSsize % this.pageSize
                     var toAdd = 1 // pg-size 10 , total-rs-size 30 => 3 and not 4
                     if ( remainder == 0 ) { toAdd = 0  }
                     this.pagesCount = Math.floor(totalRSsize/this.pageSize ) + toAdd
                     var oa = (typeof url_params.get('oa') === 'undefined') ? 'id' : url_params.get('oa') ;

                     if ( oa !== null ) {
                        this.$children[0].setAscSortBy( oa ) ; 
                     } else if ( typeof url_params.get("od") != 'undefined' ) {
                        var od = url_params.get("od")
                        this.$children[0].setDescSortBy( od ) ; 
                     } else {
                        this.$children[0].setAscSortBy("id")
                     }
                  }
                }
            })
            .catch(function(error) {
               if (typeof error !== 'undefined') {
                 var errMsg = error.toString() 
                 setMsgVisuals(errMsg);
               } else {
                 var msg = 'unknown error while fetching grid data occured !'
                 setMsgVisuals(msg,'div_msg','Error');
               } 
            }) 
	  	   }
	      , postNewServerSideId: function (dbid){
               return axios.post('/<%= $db =%>/create/<%= $item =%>', {
                id: dbid
               })
               .then(function (response) { 
                  return response ;
               })
               .catch(function (error) {
                  if (typeof error !== 'undefined') {
                    var errMsg = error.response.data.msg
                    throw new Error(errMsg);
                  }
               });
         }
         , createNewItem: function (dbid) {
            this.postNewServerSideId(dbid)
            .then ( result => {
               if ( result.toString() !== "Error: Request failed with status code 409" ) {
                  var url_params = this.getUrlParams();
                  var queryStr = ""
                  for(var kv of url_params.entries()) { queryStr = queryStr + kv[0]+ '='+ kv[1] + '&'; }
                  var uri = window.location.href.split('?')[0] + '?' + queryStr.slice(0, - 1)
                  if ( uri.indexOf("oa=prio") === -1 ) { url_params.set("od" , "id") }
                  url_params.set("pg-size" , "7")
                  url_params.set("pg-num" , 1)
                  this.fetchServerSideDataToUI(url_params)
                  if ( uri.indexOf("oa=prio") === -1 ) { 
                     uri = uri.replace(/([&]{0,1}oa=([0-9a-zA-Z_\-]+))+/gi , "") 
                     uri = uri.replace(/([&]{0,1}od=([0-9a-zA-Z_\-]+))+/gi , "") 
                     uri = uri.setUriParam("od","id")
                  } else {
                     uri = uri.setUriParam("od",null)
                  }
                  uri = uri.replace(/([&]{0,1}pg-num=([0-9a-zA-Z_\-]+))+/gi , "") 
                  uri = uri.replace(/([&]{0,1}pg-size=([0-9a-zA-Z_\-]+))+/gi , "") 
                  uri = uri.replace(/([&]{0,1}for=([0-9a-zA-Z_\-]+))+/gi , "") 
                  uri = uri.replace(/([&]{0,1}with=([0-9a-zA-Z_\-]+))+/gi , "") 
                  uri = uri.replace(/([&]{0,1}like-by=([0-9a-zA-Z_\-]+))+/gi , "") 
                  uri = uri.replace(/([&]{0,1}like-val=([0-9a-zA-Z_\-]+))+/gi , "") 
                  window.location.href = uri // and redirect !!!
               } else {
                  var msg = result.toString(); 
                  msg = msg + ". Somebody was faster than you in the second you clicked !"
                  msg = msg + " Retry once again."
                  setMsgVisuals( msg ) ;
               }
            })				
            .catch(function (error) {
               setMsgVisuals(error.toString());
               setMsgVisuals(error.message);
            });

         }
         , updateItem: function (content,id,oldValue) {
            var arr = id.split('-')
            var col = arr[0]
            var dbid = arr[1]
            var ret = 1
            content = ( content == "" ? "null" : content ) //empty cell is treated as null
            
            axios.post('/<%= $db =%>/update/<%= $item =%>', {
                  attribute: col ,
                  id: dbid , 
                  cnt: content
            })
            .then( 
               response => {
                  content = ( content == "null" ? "" : content )
                  newCntIndx = this.gridData.findIndex(obj => obj.id == dbid);
                  this.gridData[newCntIndx][col] = content; // it-180920075303 , it-181011195040 !!!
               }
            )
            .catch(function (error) {
               document.getElementById(id).value = (oldValue == "null" ? "" : oldValue)
               if (typeof error !== undefined ) {
                 var errMsg = error.response.data.msg
                 console.error ( error.response.data.msg )
                 setMsgVisuals(errMsg);
               }
            });
          }
          , deleteItem (id) {
               var arr = id.split('-')
               var dbid = arr[2]
               
               axios.post('/<%= $db =%>/delete/<%= $item =%>', {
                     id: dbid 
               })
               .then( 
                  response => {
                     var url_params = this.getUrlParams();
                     if ( typeof this.$children[0].pageSize !== "undefined" ) {
                        url_params.delete("pg-size") ; 
                        url_params.set("pg-size", this.$children[0].PageSize ) ;
                     }
                     if ( typeof this.$children[0].pageNum !== undefined ) {
                        url_params.delete("pg-num") ; 
                        url_params.set("pg-num", this.$children[0].pageNum ) ;
                     }
                     if ( typeof this.$children[0].sortKey !== "undefined" ) {
                        var key = this.$children[0].sortKey ; 
                        url_params.delete("oa") ; 
                        url_params.delete("od") ; 
                        if ( this.$children[0].sortOrders[key] === 1 ) {
                           url_params.set("oa", this.$children[0].sortKey.trim()) ;
                        } else {
                           url_params.set("od", this.$children[0].sortKey.trim() ) ;
                        }
                     }
                     url_params.delete("pg-num") ; 
                     url_params.delete("pg-size") ; 
                     url_params.set("pg-size" , this.pageSize);
                     url_params.set("pg-num" , this.pageNum);
                     this.fetchServerSideDataToUI(url_params);
                  }
               )
               .catch(function (error) {
                  setMsgVisuals(error.message);
               });
          }
         , goToNextPage: function (id) {
               var uri = window.location.href 
               if ( uri.indexOf("?") === -1 ) { uri = uri + '?' }
               if ( uri.indexOf("pg-num=") === -1 ) {
                  uri = uri + "&pg-num=2"
               } else {
                  var newPageNum = Number(this.pageNum)+1
                  if ( newPageNum > this.pagesCount ) { newPageNum = this.pagesCount }
                  uri = uri.replace("pg-num=" + this.pageNum, "pg-num=" + String(newPageNum))
               }
               window.location.href = uri 
         }
         , goToPrevPage: function (id) {
               var uri = window.location.href 
               if ( uri.indexOf("?") === -1 ) { uri = uri + '?' }
               if ( uri.indexOf("pg-num=") === -1 ) {
                  uri = uri + "&pg-num=1"
               } else {
                  var newPageNum = Number(this.pageNum)-1
                  if ( typeof newPageNum == "undefined" || newPageNum < 1 ) { newPageNum = 1 }
                  uri = uri.replace("pg-num=" + this.pageNum, "pg-num=" + String(newPageNum))
               }
               window.location.href = uri 
         }
         , goToNextPage10: function (id) {
               var uri = window.location.href 
               if ( uri.indexOf("?") === -1 ) { uri = uri + '?' }
               if ( uri.indexOf("pg-num=") === -1 ) {
                  uri = uri + "&pg-num=1"
               } else {
                  var newPageNum = Number(this.pageNum)+10
                  if ( newPageNum > this.pagesCount ) { newPageNum = this.pagesCount }
                  uri = uri.replace("pg-num=" + this.pageNum, "pg-num=" + String(newPageNum))
               }
               window.location.href = uri 
         }
         , goToPrevPage10: function (id) {
               var uri = window.location.href 
               if ( uri.indexOf("?") === -1 ) { uri = uri + '?' }
               if ( uri.indexOf("pg-num=") === -1 ) {
                  uri = uri + "&pg-num=1"
               } else {
                  var newPageNum = Number(this.pageNum)-10
                  if ( typeof newPageNum == "undefined" || newPageNum < 1 ) { newPageNum = 1 }
                  uri = uri.replace("pg-num=" + this.pageNum, "pg-num=" + String(newPageNum))
               }
               window.location.href = uri 
         }
     }
     , mounted() {
	      this.fetchServerSideDataToUI();
         bus.$on('searchBoxInputChanged',this.onSearchBoxInputChanged)
	  }
   });
