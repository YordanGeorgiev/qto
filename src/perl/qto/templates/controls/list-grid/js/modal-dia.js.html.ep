Vue.component('form-input', {
	template: '#form-input'
	, props: {
       label: {
         default: ""
      }
      , cid: {
         twoWay: true
         , defult: null
      }
      , cnt: {
         twoWay: true
         , defult: ""
      }
   }
   , data: function(){
      return {
         oldData: ''
         , content: null
      }
   }
   , mounted(){
      this.cid = this.label + '-' + this.$parent.$attrs.id.replace("dia-","")
      this.content = this.cnt
   }
   , oldData: ""
   , methods: {
      onBlur(ev) {
         var modifiedContent = ev.target.value
         this.content = modifiedContent
         this.cid = ev.target.id
         this.$parent.updateItem(modifiedContent,this.cid,this.oldData)
      }
      , forceRerender() {
         this.key += 1;  
      }
      , focused(ev) {
            this.oldData = ev.target.value
       }
   }
});

Vue.component('form-textarea', {
	template: '#form-textarea'
	, props: {
       label: {
         default: ""
      }
      , cid: {
         twoWay: true
         , defult: null
      }
      , cnt: {
         twoWay: true
         , defult: ""
      }
   }
   , data: function(){
      return {
         content: null
         , oldData: ""
      }
   }
   , mounted(){
      this.cid = this.label + '-' + this.$parent.$attrs.id.replace("dia-","")
      this.content = this.cnt
   }
   , methods: {
      onBlur(ev) {
         var modifiedContent = ev.target.value
         this.content = modifiedContent
         this.cid = ev.target.id
         this.$parent.updateItem(modifiedContent,this.cid,this.oldData)
      }
      , focused(ev) {
         this.oldData = ev.target.value
      }
      , forceRerender() {
         this.key += 1;  
      }
   }
});


Vue.component('form-select', {
	template: '#form-select'
	, props: ['label','cnt','cid']
});

	Vue.component('btn-del', {
       name: 'btn-del'
	  , data: function () {
		 return {
			count: 0
		 }
	  }
	  , methods: {
       clickedDelete: function(ev) {
         this.$emit('clickedBtnDelete', ev.currentTarget.id)
       }
	  }
	  , template: `<button type="submit" href="javascript:void(0);" v-on:click="clickedDelete($event)"><img loading="lazy" src="../../themes/thme-blue/img/controls/trash-bin.png" /></button>` 
	})

Vue.component('modal', {
	  template: '#modal-tmpl'
	, props: ['field','showModal']
	, data: function() {
		return {
			cnt: ''
			, cid: ''
         , itmName: '<%= "$item" =%>'
			, itemId: null
			, itemData: null
			, itmMeta: null
			, fields: []
			, msg: ""
			, count: 0
		}
	}
	, mounted () {
      this.redraw()
   }
	, updated() {
        if ( this.count == 0 ) {
           document.getElementById("modal-dia-title-id").focus()
           document.getElementById("modal-dia-title-id").click()
           this.count++
        }
	}
   , components: {
       'fileupload': FileUpload.FileUpload
     }
	, methods: {
		addFormElement: function(type,tsElId,ccid,label,cnt) {
			this.fields.push({
			    'type': type
			  , 'key': tsElId
           , 'id':ccid
			  , 'label':label
			  , 'cnt':cnt
			});
		 }
      , redraw: function() {
         var shown = ",guid,id,update_time"
         this.itemId = this.$attrs.id.replace("dia-","")
         this.itemData = this.$parent.data.find(obj => obj.id == this.itemId )
         this.itmMeta = this.$parent.$parent.gridMeta
         var firstElId = null 
         Object.keys(this.itmMeta).sort((a,b) => (this.itmMeta[a].attribute_number > this.itmMeta[b].attribute_number) ? 1 : ( this.itmMeta[b].attribute_number > this.itmMeta[a].attribute_number ) ? -1 :0).map( key => {
            var prop = this.itmMeta[Number(key)]
            if (this.itmMeta.hasOwnProperty(key)) {
               var dataType = this.itmMeta[key].data_type
               var charMaxLength = this.itmMeta[key].char_max_length
               var attributeName = String(this.itmMeta[key].attribute_name)
               var attributeNum = Number(this.itmMeta[key].attribute_number)
               var attributeValue = this.itemData[attributeName]
               var elId = attributeName + '-' + String(this.itemId)
               var tsElId = elId + '-' + ((new Date().getTime() * 10000) + 621355968000000000)
               if ( dataType.includes('character varying')  && Number(charMaxLength) > 99 ) {
                  if (this.itemData.hasOwnProperty(attributeName) && shown.indexOf(',' + attributeName + ',') === -1) {
                     firstElId = elId
                     this.addFormElement('form-textarea',tsElId,elId,attributeName,attributeValue )
                  }
               } else {
                  if (this.itemData.hasOwnProperty(attributeName) && shown.indexOf(',' + attributeName + ',') === -1) {
                     firstElId = elId
                     this.addFormElement('form-input',tsElId,elId,attributeName,attributeValue )
                  }
               }
              shown = shown + ',' + attributeName + ','
            }
         })
	   }
      , updateItem: function (modifiedContent,id,oldValue) {
         var arr = id.split('-')
         var col = arr[0]
         var dbid = arr[1]
			this.$emit('update', modifiedContent ,id,oldValue) // events up ...
         var elId = col + '-' + dbid
         var tsElId = elId + '-' + ((new Date().getTime() * 10000) + 621355968000000000)
         this.fields.find(obj => obj.id == elId).id = col + "-" + dbid
         this.fields.find(obj => obj.id == elId).key = tsElId
         this.fields.find(obj => obj.id == elId).label = col
         this.fields.find(obj => obj.id == elId).cnt = modifiedContent // dyn controls !!!
         this.cid = 'dia-' + dbid
       }
	}
})
