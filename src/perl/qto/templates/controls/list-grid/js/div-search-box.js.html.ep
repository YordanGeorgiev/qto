Vue.component('div_search_box', {
  name: "div_search_box",
  components: {
    searchbox: Searchbox
  },
  data() {
      return {
           pdblist: []
         , ptblist: []
         , pcollist: []
         , globalSrch: ""
      }
  }
  , methods: {
  fetchSSDataForDbs: function (url_params) { // only data logic here !!!
		if ( typeof url_params === "undefined" ) { url_params = { as:"grid" } }

      return axios.get(("/<%== $db =%>/select-databases") , { params: url_params } )
      .then(response => {
         return response.data.dat.map(obj => obj.datname);
      })
      .catch(function(error) {
         console.error ( error.toString );
         return error ; 
      })
	 }
  , fetchSSDataForDbsUI: function (url_params) { // only UI logic here !!!
      var self = this
      return this.fetchSSDataForDbs()
      .then( response => {
         if ( response.toString().startsWith('Error') ) {  // NOK 
            self.pdblist = [] ; 
            window.alert(response.toString()) ; 
         }
         else {                                             // OK 
            self.pdblist = response ; 
         }
      })
      .catch(function(error) {                              // NOK
         self.pdblist = [] ; 
         window.alert(error.toString()) ; 
      })
   }
  , fetchSSDataForTables: function (url_params) { // only data logic here !!!
		if ( typeof url_params === "undefined" ) { url_params = { as:"grid" } }

      return axios.get(("/<%== $db =%>/select-tables") , { params: url_params } )
      .then(response => {
         return response.data.dat.map(obj => obj.table_name);
      })
      .catch(function(error) {
         console.error ( error.toString );
         return error ; 
      })
	 }
  , fetchSSDataForTablesUI: function (url_params) { // only UI logic here !!!
      var self = this
      return this.fetchSSDataForTables()
      .then( response => {
         if ( response.toString().startsWith('Error') ) {  // NOK 
            self.ptblist = [] ; 
            window.alert(response.toString()) ; 
         }
         else {                                             // OK 
            self.ptblist = response ; 
         }
      })
      .catch(function(error) {                              // NOK
         self.ptblist = [] ; 
         window.alert(error.toString()) ; 
      })
   }
  , fetchSSDataForCols: function (url_params) { // only data logic here !!!
		if ( typeof url_params === "undefined" ) { url_params = { as:"grid" } }

      return axios.get(("/<%== $db =%>/select-item-meta-for/<%== $item =%>") , { params: url_params } )
      .then(response => {
         return response.data.dat.map(obj => obj.attribute_name);
      })
      .catch(function(error) {
         console.error ( error.toString );
         return error ; 
      })
	 }
  , fetchSSDataForColsUI: function (url_params) { // only UI logic here !!!
		if ( typeof url_params === "undefined" ) { return; }
      var self = this
      return this.fetchSSDataForCols()
      .then( response => {
         if ( response.toString().startsWith('Error') ) {  // NOK 
            self.pcollist = [] ; 
            window.alert(response.toString()) ; 
         }
         else {                                             // OK 
            self.pcollist = response ; 
         }
      })
      .catch(function(error) {                              // NOK
         self.pcollist = [] ; 
         window.alert(error.toString()) ; 
      })
   }
  }
  , template: ` <searchbox :dblist="pdblist" :tblist="ptblist" :collist="pcollist" />`
  , mounted() {
      document.getElementById("inp_srch_box").focus();
      // focus the search textbox on forward slash, but only when not in textarea ...
      window.addEventListener('keyup', function(event) {
         if (event.key === "/" ) { 
            var focusedElement = document.activeElement;
            if ( typeof focusedElement !== "undefined" ) {
               if ( typeof focusedElement.getAttribute("contenteditable") === "undefined" ) {
                  return;
               } else {
                  if ( focusedElement.getAttribute("class") == "cls_desc") {
                     return ;
                  } else {
                     document.getElementById("inp_srch_box").focus();
                  }
               }
          } else {
               document.getElementById("inp_srch_box").focus();
          }
         }
      });
  }
});

