

var state = {
	items: []
};

var getters = {
   getItems: state => state.items
}

var mutations = {
   ADD_ITEM: (state, payload) => {
      var newItem = {
         id: payload.newId,
         name: payload.name,
         completed: false
      }
      state.items.unshift(newItem);
   },
   SET_ITEMS (state, items) {
      state.items = items
   },
   DELETE_TODO: (state, payload) => {
      var index = state.items.findIndex(todo => todo.id === payload);
      state.items.splice(index, 1);
   }
};


var actions = {
   loadItems ({ commit }) {
      var webhost = window.location.href.split("/")[2]
      var ws = new RobustWebSocket("ws://" + webhost + "/ws-select-items", undefined , {
         timeout: 5000,
         shouldReconnect: function(event, ws) {
         if (event.code === 1008 || event.code === 1011) return
            return [0, 3000, 10000][ws.attempts]
         },
         automaticOpen: true,
         ignoreConnectivityEvents: false
      });

      ws.addEventListener('open', function(event) {
         console.log ( "opening ws")
         ws.send('open <%= $db %>')
      })

      ws.addEventListener('message', function(event) {
         console.log ( "start msging on ws")
         var data = JSON.parse( event.data)
         console.log ( data)
         console.log ( "stop data" )
         var items = data.dat  //alles ok // todo:ysg data.dat
         console.log ( items )
         console.log ( "stop items " )
         commit('SET_ITEMS', items)
         console.log ( "stop  msging on ws")
      })

       ws.send('open <%= $db %>')


     },
     addItem: (context, payload) => {
         context.commit("ADD_ITEM", payload)
     },
     deleteItem: (context, payload) => {
         context.commit("DELETE_TODO", payload)
     }
 }

var store = new Vuex.Store({
   state: state,
   getters: getters,
   mutations: mutations,
   actions: actions
});


Vue.component("list-items", {
   created () {
         this.$store.dispatch('loadItems')
   },
   computed: {
      items() {
         return this.$store.getters.getItems;
      }
   },
   methods: {
      deleteItem: function(id) {
      this.$store.dispatch("deleteItem", id);
      }
   },
   template: "#list-items"
});

	
var app = new Vue({
   data: () => ({
      name: "",
      newId: 3
   }),
   methods: {
      addItem: function() {
      this.$store.dispatch("addItem", this);
      this.newId ++;
      this.name = "";
      }
  },
   store: store,
   el: "#app",
   template: "#app-template"
});

