   var state = {
      items: []
      , filteredItems: []
      , showSnackBar: false
      , showContextMenu: false
      , msg : ''
      , infinity: false
      , showRgtMenu: false
    };

   var getters = {
      getItems: state => state.items
      , getFilteredItems: state => state.filteredItems
      , getSnackBarShow: state => state.showSnackBar
      , getContextMenu: state => state.showContextMenu
      , getSnackBarMsg: state => state.msg
      , getSnackBarInfinity: state => state.infinity
      , getRgtMenuShow: state => state.showRgtMenu
   }

    var mutations = {
           ADD_ITEM: (state, payload) => {
               var newItem = {
                   id: payload.newId,
                   name: payload.name,
                   completed: false
               }
               state.items.unshift(newItem);
           }
           , SET_ITEMS: (state, items) => {
               state.items = items
           }
           , SET_FILTERED_ITEMS: (state, fitems) => {
               state.filteredItems = fitems
           }
           , SET_SNACKBAR_SHOW: (state, showSnackBar) => {
               state.showSnackBar = showSnackBar
           }
           , SET_CONTEXT_MENU_SHOW: (state, payload, showContextMenu) => {
               state.showContextMenu = true
           }
           , SET_SNACKBAR_MSG: (state, msg) => {
               state.msg = msg
           }
           , SET_SNACKBAR_INFINITY: (state, infinity) => {
               state.infinity = infinity
           }
           , SET_RGT_MENU_SHOW: (state, showRgtMenu) => {
               state.showRgtMenu = showRgtMenu
           }
           , DELETE_ITEM: (state, payload) => {
               state.showRgtMenu = false
               var index = state.items.findIndex(item => String(item.id) === payload.oid )
               if ( index !== -1 ) { state.items = state.items.splice(index, 1) }
           }
           , CREATE_ITEM: (state, payload) => {
               state.showRgtMenu = false
               state.items = state.items.push(payload);
           }
           , UPDATE_ITEM: (state, payload) => {
               var arr = payload.eid.split('-')
               var dbid = arr[1]
               var dsc_col = arr[0]
               var col = dsc_col.split('_')[1]
               var citems = state.items
               var index = citems.findIndex(item => item.id == dbid)
               var item = citems[index]
               if ( col === 'description' ) {
                  item.description = payload.newVal
               } else if ( col === 'src' ) {
                  item.src = payload.newVal
               } else if ( col === 'name' ) {
                  item.name = payload.newVal
               } else {
                  console.error ( "unknown col for dbid: " + String(dbid ) )
               }
               citems[index] = item
               state.items = citems
           }
    };

   // where the backend calls should be issued
   // Instead of mutating the state, actions commit mutations.
   // actions can contain arbitrary asynchronous operations
    var actions = {
         loadItems ({ commit }) {
            var url_params = getUrlParams()  
				var url = (window.location.pathname).replace("/view/" , "/hiselect/")
            axios.get(url , { params: url_params} )
            .then( response => {
               if ( response.status === 204 ) {
                  var warningMsg = response.statusText
                  console.warn ( warningMsg ) 
                  commit('SET_SNACKBAR_MSG', warningMsg ) 
                  commit('SET_SNACKBAR_SHOW', true)
                  commit('SET_ITEMS', [] )
                  commit('SET_FILTERED_ITEMS', [] )
               } else if ( response.status === 404 || response.status === 400) {
                  var errMsg = response.statusText + ": " + response.data.msg
                  commit('SET_SNACKBAR_MSG', errMsg ) 
                  commit('SET_SNACKBAR_SHOW', true )
                  commit('SET_ITEMS', [] )
                  commit('SET_FILTERED_ITEMS', [] )
                  console.error( errMsg ) 
               } else {
                  var data = response.data
                  var dataType = (typeof data)
                  if ( dataType === 'undefined' ) {
                     var errMsg = 'unexpected err occurred while fetching data !!!'
                     console.error( errMsg ) 
                  	commit('SET_SNACKBAR_SHOW', true)
                  	commit('SET_SNACKBAR_MSG', errMsg ) 
                  } else {
                  	var items = data.dat  //alles ok
                     var isNotAPrintDoc = ( document.location.search.indexOf('as=print-doc')<=0 ? true : false )
                  	commit('SET_SNACKBAR_SHOW', false)
                  	commit('SET_RGT_MENU_SHOW', isNotAPrintDoc )
                  	commit('SET_ITEMS', items)
                  	commit('SET_FILTERED_ITEMS', items)
						}
					}
				})
            .catch(function(err) {
               console.error ( err ) 
               commit('SET_SNACKBAR_MSG', err) 
               commit('SET_SNACKBAR_SHOW', true )
               commit('SET_ITEMS', [] )
               commit('SET_FILTERED_ITEMS', [] )
               console.error( err.toString) 
            }) 

         }
         , loadFilteredItems: (context,search) => {
            if ( typeof (search ) == "undefined"){
               context.commit('SET_FILTERED_ITEMS', state.items)
               return
            }
            if ( typeof(state.items) !== "undefined") {
               var fltrItems = state.items.filter(function (el) {
                  if ( typeof(el.name) !== "undefined" && el.name != null && el.name.toLowerCase().indexOf(search.toLowerCase()) !== -1 ){
                     return true
                  } else if ( typeof(el.description) !== "undefined" && el.description != null) {
                     if ( el.description.toLowerCase().indexOf(search.toLowerCase()) !== -1){
                        return true
                     }
                  } else {
                     return false
                  }
               });
               context.commit('SET_FILTERED_ITEMS', fltrItems)
            } else {
               context.commit('SET_FILTERED_ITEMS', state.items)
            }
         }
         , loadSnackBar: (context, showSnackBar) => {
            context.commit('SET_SNACKBAR_SHOW', showSnackBar)
         }
         , loadContextMenu: (context, id, showContextMenu) => {
            context.commit('SET_CONTEXT_MENU_SHOW', id, showContextMenu)
         }
         , loadSnackBarMsg: (context, msg) => {
            context.commit("SET_SNACKBAR_MSG", msg)
         }
         , loadSnackBarInfinity: (context, infinity) => {
            context.commit("SET_SNACKBAR_INFINITY", infinity)
         }
         , loadRgtMenuShow: (context, showRgtMenu) => {
            context.commit("SET_RGT_MENU_SHOW", showRgtMenu)
         }
         , hideSnackBar (context) {
            context.commit('SET_SNACKBAR_SHOW', false )
         }
         , showContextMenu (context,payload) {
            var e = payload ; // the mouse event
            var id = String(e.target.id).split('-')[1]
            if ( typeof ( id ) === "undefined" ) { console.error( "showContextMenu id undef" ) ; return }
            e.target.disabled = true
            e.preventDefault();
            var menu = document.getElementById("div-context-menu")
            menu.cid = id
            menu.style.left = e.pageX + 'px'
            menu.style.top = e.pageY + 'px'
            menu.style.display = 'block'
            menu.style.zIndex = 101
            context.commit('SET_CONTEXT_MENU_SHOW', payload, true )
            e.target.disabled = false
         }
         , deleteItem: (context,payload) => {
               var uri = window.location.href.replace('/view/', '/hidelete/')
               uri = ( uri.indexOf('#') === -1 ) ? uri : uri.split('#')[0] 

               axios.delete(uri, { data:{
                  oid: payload.oid
               }})
               .then(response => { 
                  if ( typeof response.status != "undefined" && response.status === 200 ) {
                     var seq = 1
                     var index = state.items.findIndex(item => String(item.id) === payload.oid )
                     if ( index !== -1 ) { seq = state.items[index].seq -1 }
                     context.commit("DELETE_ITEM", payload)
                     actions.loadItems(context)
                     var elToScrollTo = document.getElementById("title-" + seq)
                     elToScrollTo.scrollIntoView(true);
                  } else {
                     if ( typeof err.response.data.msg != "undefined" ) { 
                        context.commit('SET_SNACKBAR_SHOW', true)
                        context.commit('SET_SNACKBAR_MSG', err.response.data.msg.split("::")[0]) 
                     }
                     console.error ( err.response )
                     console.error ( err.stack )
                  }
               })
               .catch(err => {
                  console.error ( err ) 
                  if ( typeof err.response.data.msg != "undefined" ) { 
                     console.error ( err.response.data.msg )
                     context.commit('SET_SNACKBAR_SHOW', true)
                     context.commit('SET_SNACKBAR_MSG', err.response.data.msg.split("::")[0]) 
                  }
               }) 
         }
         , createItem: (context,payload) => {
               var uri = window.location.href.replace('/view/', '/hicreate/')
               uri = ( uri.indexOf('#') === -1 ) ? uri : uri.split('#')[0] 
               axios.post(uri, {
                  oid: payload.oid,
                  lvlalpha: payload.lvlalpha
               })
               .then(response => { 
                  if ( typeof response.status != "undefined" && response.status === 200 ) {
                     actions.loadItems(context)
                  } else {
                     console.error(err)
                     if ( typeof err.response.data.msg != "undefined" ) { 
                        context.commit('SET_SNACKBAR_MSG', err.response.data.msg.split("::")[0]) 
                     } else {
                        context.commit('SET_SNACKBAR_MSG', err) 
                     }
                     context.commit('SET_SNACKBAR_SHOW', true)
                  }
               })
               .catch(err => {
                  console.error(err) 
                  if ( typeof err.response.data.msg != "undefined" ) { 
                     console.error(err.response.data.msg )
                     context.commit('SET_SNACKBAR_MSG', err.response.data.msg.split("::")[0]) 
                  } else {
                     context.commit('SET_SNACKBAR_MSG', err) 
                  }
                  context.commit('SET_SNACKBAR_SHOW', true)
               }) 
         }
         , updateItem: (context,payload) => {
            var arr = payload.eid.split('-')
            var dbid = arr[1]
            var dsc_col = arr[0]
            var col = dsc_col.split('_')[1]
            var newCnt = payload.newVal
            newCnt = ( newCnt == "" ? "null" : newCnt ) //empty cell is treated as null
            axios.post('/<%= $db =%>/update/<%= $item =%>', {
                  attribute: col ,
                  id: dbid , 
                  cnt: newCnt
            })
            .then(response => { 
               if ( typeof response.status != "undefined" && response.status === 200 ) {
                  newCnt = ( newCnt == "null" ? "" : newCnt )
                  context.commit("UPDATE_ITEM", payload)
                  actions.loadItems(context)
               } else {
                  if ( typeof err.response.data.msg != "undefined" ) { 
                     context.commit('SET_SNACKBAR_SHOW', true)
                     context.commit('SET_SNACKBAR_MSG', err.response.data.msg.split("::")[0]) 
                  }
                  console.error ( err.response )
                  payload.newVal = payload.oldData
                  context.commit("UPDATE_ITEM", payload)
               }
            })
            .catch(err => {
               console.error(err) 
               if ( typeof err.response.data.msg != "undefined" ) { 
                  console.error(err.response.data.msg )
                  context.commit('SET_SNACKBAR_MSG', err.response.data.msg.split("::")[0]) 
               } else {
                  context.commit('SET_SNACKBAR_MSG', err) 
               }
               context.commit('SET_SNACKBAR_SHOW', true)
            }) 
         }
   } 
   //eof actions

    var store = new Vuex.Store({
           state: state,
           getters: getters,
           mutations: mutations,
           actions: actions
       });


   const app = new Vue({
      store: store
      , el: "#view_app"
      , template: "#app-template"
      , components: {
           'view-doc-items-list': ViewDocItemsList
         , 'snackbar': SnackBar
         , 'context-menu': ContextMenu
         , 'inp-srch-box': OmniSrchBox
      }
		, computed: {
         cshowSnackBar: {
				get: function() {
					return this.$store.getters.getSnackBarShow ;
				}
				, set: function(newVal) {
         		this.$store.dispatch("loadSnackBar", newVal);
				}
         }
         , cshowContextMenu: {
				get: function() {
					return this.$store.getters.getContextMenu ;
				}
				, set: function(newVal,id) {
         		this.$store.dispatch("loadContextMenu", id, newVal);
				}
         }
			, cmsg: {
				get: function(){
					return this.$store.getters.getSnackBarMsg
				}
			}
			, cinfinity: {
				get: function(){
					return this.$store.getters.getSnackBarInfinity
				}
				, set: function(newVal){
         		this.$store.dispatch("loadSnackBarInfinity", newVal);
				}
			}
			, cRgtMenuShow: {
				get: function(){
					return this.$store.getters.getRgtMenuShow
				}
				, set: function(newVal){
					this.rgt_menu_show = newVal
         		this.$store.dispatch("loadRgtMenuShow", newVal);
				}
			}
		}
      , data: () => ({
         position: 'top-center'
         , ctimeout: 3900
         , updater: ''
         , search: ''
      })
      , created: function () {
         this.$store.dispatch('loadItems')
         this.$store.dispatch("loadContextMenu", 0, false);
         this.$store.dispatch("loadSnackBar" , false);
         this.$store.dispatch("loadSnackBarInfinity", false);
         this.$store.dispatch("loadRgtMenuShow", false);
      }
      , mounted: function () {
         document.getElementById("inp_srch_box").focus();
      }
      , methods: {
         addItem: function() {
            this.$store.dispatch("addItem", this);
         }
         , createItem: function(e) {
            this.$store.dispatch("createItem", this);
            this.$store.dispatch('loadItems')
         }
         , updateItem: function(e) {
            this.$store.dispatch("updateItem", e);
         }
         , hideSnackBar: function() {
            this.$store.dispatch("hideSnackBar", this);
            this.$store.dispatch("loadSnackBarInfinity", false);
         }
         , showContextMenu: function (e) {
            this.$store.dispatch("showContextMenu",e);
         }
     }
     , updated: function() {
         this.$nextTick(function() {
         var uri = window.location.href 
         var anchor = ( uri.indexOf('#') === -1 ) ? '' : uri.split('#')[1]
         if ( String(anchor).length > 0 && this.updater === 'page_load') {
            this.updater = "" // only on page-load !
            location.href = "#"+String(anchor)
         }
       })
      }
   });
   app.updater = "page_load"

   function openRightMenu(){
     var el = document.getElementById("rgt_menu")
     if ( el.style.width == "27%" ) {
         el.style.width = "0%"
     } else {
         el.style.width = "27%"
     }
   }

