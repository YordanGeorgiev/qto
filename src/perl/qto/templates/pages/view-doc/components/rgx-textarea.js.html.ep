  const RgxTextArea = Vue.component ('rgx-textarea', {
     template: `<textarea v-bind:id="id" @blur="onBlur" v-html="ccnt" v-on:keyup.esc="revertChange"></textarea>`,
     props: {
		   id: {}
         , formats: {
            twoWay: true
            , default: ""
         }
	  }
     , computed: {
			ccnt: {
				get: function() {
					return this.cnt
				},
				set: function(newValue) {
					this.cnt = newValue
				}
			}
	  }
     , data: function (){
         return {
            oldData: ""
				, cnt: ""
         }
	  }
     , mounted: function(){
     		this.autogrow() 
		}
     , methods: {
          onBlur(ev) {
              var el = ev.target
              var newVal  = ev.target.value
              var payload = {'eid': this.$el.id, 'newVal': newVal, 'oldData': this.oldData}
         	  this.$store.dispatch("updateItem", payload);
              this.$el.style.height = "auto";
          }
         , focused(ev) {
               var el = ev.target
               this.oldData = ( typeof ev.target.value == "undefined" ) ? " " : ev.target.value
          }
			 , autogrow() {
					if ( this.$el.value ){
						this.$el.style.height = this.$el.scrollHeight + 'px';
					} else {
						this.$el.style.height = '5px';
					}
					this.displayEmptyCellIfNullOrUndefined()
			 }
          , revertChange() {
              this.$el.value = this.oldData ; 
              this.displayEmptyCellIfNullOrUndefined()
          }
          , displayEmptyCellIfNullOrUndefined() {
               if ( typeof this.ccnt == "undefined" || this.ccnt === 'null' || this.ccnt == null) {
                  this.$el.innerText = " "
                  this.$el.value = " "
                  this.cnt = " "
               }
          }
		}
   })
