% use utf8;
% layout 'site';

% content_for header_csss => begin
   <link rel="stylesheet" type="text/css" href="../../css/screen/controls/app_list_grid.css" />
   <link rel="stylesheet" media="print"  href="../../css/print/controls/app_list_grid.css" />
% end

   <div id="app" >
		<!-- component template -->
		<script type="text/x-template" id="grid-template">
		  <table tabindex="1">
			 <thead>
				<tr>
				  <th v-for="key in columns"
					 @click="sortBy(key)"
					 :class="{ active: sortKey == key }" tabindex="1" v-on:keyup.enter="sortBy(key)">
					 {{ key }}
					 <span class="arrow" :class="sortOrders[key] > 0 ? 'asc' : 'dsc'">
					 </span>
				  </th>
				</tr>
			 </thead>
			 <tbody>
				<tr v-for="entry in filteredData">
				  <td v-for="key in columns">
					 {{entry[key]}}
				  </td>
				</tr>
			 </tbody>
		  </table>
		</script>

		<div id="demo">
			<div id="div_frm_srch">
		  		<form id="frm_search">
			 		<input id="inp_srch_query" name="query" v-model="searchQuery">
		  		</form>
			</div>
		  <demo-grid
			 :data="gridData"
			 :columns="gridColumns"
			 :filter-key="searchQuery">
		  </demo-grid>
		</div>

   </div>

<script>
if ( document.getElementById("spn_msg") ) {
// register the grid component
Vue.component('demo-grid', {
  template: '#grid-template',
  props: {
    data: Array,
    columns: Array,
    filterKey: String
  },
  data: function () {
    var sortOrders = {}
    this.columns.forEach(function (key) {
      sortOrders[key] = 1
    })
    return {
      sortKey: '',
      sortOrders: sortOrders
    }
  },
  computed: {
    filteredData: function () {
      var sortKey = this.sortKey
      var filterKey = this.filterKey && this.filterKey.toLowerCase()
      var order = this.sortOrders[sortKey] || 1
      var data = this.data
      if (filterKey) {
        data = data.filter(function (row) {
          return Object.keys(row).some(function (key) {
            return String(row[key]).toLowerCase().indexOf(filterKey) > -1
          })
        })
      }
      if (sortKey) {
        data = data.slice().sort(function (a, b) {
          a = a[sortKey]
          b = b[sortKey]
          return (a === b ? 0 : a > b ? 1 : -1) * order
        })
      }
      return data
    }
  },
  filters: {
    capitalize: function (str) {
      return str.charAt(0).toUpperCase() + str.slice(1)
    }
  },
  methods: {
    sortBy: function (key) {
      this.sortKey = key
      this.sortOrders[key] = this.sortOrders[key] * -1
    }
  }
})

   var demo = new Vue({
     el: '#demo',
     data: {
       searchQuery: '',
       gridColumns: <%== $list_control =%>,
       //gridColumns: ['name', 'prio','description'],
       gridData: []
     },
     mounted() {
			var url_params = {} 
         if( window.location.toString().indexOf("?") != -1) {
            window.location.search.split('?')[1].replace(/([^=&]+)=([^&]*)/g, function(m, key, value) {
               url_params[decodeURIComponent(key)] = decodeURIComponent(value);
            });
         } else {
            url_params = { as:"lbls" };  
         }
			axios.get((window.location.pathname).replace("/list/" , "/select/") , { params: url_params } )
			.then(response => { this.gridData = response.data.dat
			})
			.catch(function(error) {
				document.getElementById("div_msg").innerHTML="<span id=\"spn_err_msg\">" + error.response.data.msg + '</span>'
    		}) 
	  }
   });
}
</script>
