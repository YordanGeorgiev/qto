   Vue.component('editable', {
     template: `<textarea v-bind:id="id" class="cls_cnt_edtble" @blur="onBlur" v-bind:title="content" v-model="cnt" v-on:focus="focused" v-on:click="onClick" v-on:keyup.tab="this.document.execCommand('selectAll',false,null);" v-on:keyup.esc="revertChange">{{ content }}</textarea>`,
     props: {
		   id: {}
         , cnt: {
            twoWay: true
            , default: ""
         }
	  }
     , model: {
        prop: 'cnt'
      }
     , data() {
         return {
            content: this.cnt
         }
	  }
     , oldData: ""
     , mounted() {
         this.content = this.cnt
         this.displayEmptyCellIfNullOrUndefined()
         //console.log(this.$el.id)
         this.$el.style.width = this.getColMaxWidth(this.$el) + "px"
     },
     methods: {
       displayEmptyCellIfNullOrUndefined() {
            if ( typeof this.content == "undefined" || this.content === 'null' || this.content == null) {
               this.$el.innerText = " "
               this.$el.value = " "
               this.content = " "
            }
       }
      , focused(ev) {
				var el = ev.target
            this.oldData = ev.target.value
            el.style.width = this.getColMaxWidth(el).toString() + 'px'
       }
       , onBlur(ev) {
				var el = ev.target
				var modifiedContent = ev.target.value
				this.$emit('update', modifiedContent ,ev.target.id,this.oldData) // parent's job !!!
				this.displayEmptyCellIfNullOrUndefined()
				el.rows = "2" // the default
            el.style.width = this.getColMaxWidth(el).toString() + 'px'
       }
       , revertChange() {
     		  this.$el.value = this.oldData ; 
           this.displayEmptyCellIfNullOrUndefined()
       }
       , onClick(ev){
				var el = ev.target
				setTimeout(function(){
				if ( typeof el.value != undefined && el.value != null && el.value.toString().length > 59) {
					el.style.zIndex = "1001"  
					el.rows = "7"
				}
            
			  },0);
           el.style.width = this.getColMaxWidth(el).toString() + 'px'
			}
       , getColumnMaxWidth(el) {
            var col = el.id.split('-')[0]
            var textareaList = document.querySelectorAll(".cls_cnt_edtble");
            var columnWidthsFiltered = Array.prototype.slice.call(textareaList).filter(elm => elm.id.startsWith(col))
            var widths = columnWidthsFiltered.map( elm => Number(elm.style.width.slice(0,-2)) )
            var maxWidth = widths.sort(function(a, b) { return b - a })[0]
            return maxWidth
         }
       , getColMaxWidth(el) {
            var col = el.id.split('-')[0]
            var meta = this.$parent.$parent.gridMetaData
            for (var prop in this.$parent.$parent.gridMetaData) {
               if (!this.$parent.$parent.gridMetaData.hasOwnProperty(prop)) {
                 continue;
               }
               if ( (meta[prop])["attribute_name"] !== col ) {
                  continue ;
               } else {
                  if ( (meta[prop])["data_type"].indexOf("char") === -1) {
                     maxWidth = this.calcWidth()
                  } else {
                     maxWidth = this.calcVarCharWidth(Number((meta[prop])["char_max_length"]),col)         
                  }
               }
            }

            return maxWidth
         }
       , calcWidth() {
            var width = 20
            if ( typeof this.content != undefined && this.content != null) {
               width = this.content.toString().length
               if ( width < 3 ) {
                  return 30
               } else if ( width > 2  && width < 7 ) {
                  return 40
               } else if ( width > 6 && width < 16 ) {
                  return 60
               } else if ( width > 15 && width < 35 ) {
                  return 150
               } else if ( width > 34 && width < 60 ) {
                  return 240
               } else if ( width > 59 && width < 90 ) {
                  return 300
               } else  {
                  return 460
               }
            } else {
                  return 20
            }
     		}
       , calcVarCharWidth(width,col) {
            console.log ( "col:" + String(col))
            console.log ( "calcVarCharWidth: " + String(width))
            if ( typeof width !== "undefined" ) {
               if ( width < 3 ) {
                  return 30
               } else if ( width > 2  && width < 7 ) {
                  return 40
               } else if ( width > 6 && width < 16 ) {
                  return 60
               } else if ( width > 15 && width < 35 ) {
                  return 60
               } else if ( width > 34 && width < 105) {
                  return 240
               } else if ( width > 104 && width < 205 ) {
                  return 300
               } else  {
                  return 460
               }
            } else {
               return 20
            }
     		}
		}
   })
