   Vue.component('editable', {
     template: `<textarea v-bind:id="id" class="cls_cnt_edtble" @blur="emitChange" v-bind:title="content"
               v-on:focus="focused" v-bind:style="'width: ' + calcWidth() + 'px'" v-on:keyup.esc="revertChange()">{{ (typeof content != 'undefined' && content != 'null' && content != null) ? content : '' }}</textarea>`,
     props: {
		content: {
			twoWay: true
		}
		, id: {}
	  },
     oldData: "",
     watch: {
        content: function () {
        }
     }
     , computed: {
    }
     , mounted() {
     },
     methods: {
       displayEmptyCellIfNullOrUndefined() {
            if ( typeof this.content == "undefined" || this.content === 'null' || this.content == null) {
               this.$el.innerText = " "
               console.log ( "here" )
            }
       }
      , focused(ev) {
         this.oldData = ev.target.value
       }
       , emitChange (ev) {
           var modifiedContent = ev.target.value
			  this.$emit('update', modifiedContent ,ev.target.id,this.oldData) // parent's job !!!
           if ( typeof ev.target.value == "undefined" || ev.target.value == 'null' || ev.target.value == null) {
               console.log ( "here2" )
               ev.target.value = " "
           }
       }
       , revertChange() {
     		  this.$el.innerText = this.oldData ; 
           this.displayEmptyCellIfNullOrUndefined()
       }
       , calcWidth() {
            var width = 0
            if ( typeof this.content != undefined && this.content != null) {
               width = this.content.toString().length
               if ( width < 10 ) {
                  return width*7 + 8
               } else {
                  return width*3 + 6
               }
            }
     		}
		}
   })
