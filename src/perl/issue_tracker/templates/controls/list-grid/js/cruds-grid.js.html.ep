   var gruds_crid = new Vue({
     el: '#cruds-grid',
     data: {
       globalSrch: '',
       gridColumns: <%== $list_control =%>,
       gridData: [],
       pageSize: 5,
       pageNum: 1,
       pagesCount: 0,
       UrlParams:{ as:"table" },
       pageSizes: ['5', '7', '10','15','20','30','50','100']
         , searchInputChanged: ""
		},
     	methods: {
        onSearchBoxInputChanged: function(quickSrch) {
            this.globalSrch = quickSrch ; 
        } 
      , inpQuickSrchCH: function(event) {
           if ( event ) {
               if ( document.getElementById("inp_srch_box").value !== "" ) {
                  document.getElementById("btnNew").setAttribute( 
                     "class" , "v-btn v-btn--floating theme--dark silver");
               } else {
                  document.getElementById("btnNew").setAttribute( 
                     "class" , "v-btn v-btn--floating theme--dark indigo");
               }
           } 
         }
         , getUrlParams: function (){
            var url_params = new URLSearchParams();
            if( window.location.toString().indexOf("?") != -1) {
               var href_part = window.location.search.split('?')[1].split('#')[0]
               href_part.replace("pick=","pick=id,").replace('id,id','id').replace(/([^=&]+)=([^&]*)/g, 
                  function(m, key, value) {
                     var attr = decodeURIComponent(key)
                     var val = decodeURIComponent(value)
                     url_params.append(attr,val);
               });
            } else {
               url_params.append('as' , 'grid');
               url_params.append('od' , 'id');
               url_params.append('page-size' , 5);
               url_params.append('page-num' , 1);
            }
            return url_params ; 
         }
	      , fetchServerSideData: function (url_params){
            if ( typeof url_params === "undefined" ) { url_params = this.getUrlParams()  }

            return axios.get((window.location.pathname).replace("/list/" , "/select/") , { params: url_params } )
            .then(response => { 
               return response.data ; 
            })
            .catch(function(error) {
               return error.response.data.msg ; 
            }) 
         }
         , generatePageNum: function (pgNum) {
				var currentUrl = window.location.href ; 
				if ( currentUrl.indexOf("page-num=") === -1 ) {
					var newUrl = currentUrl + "&page-num=" + pgNum ; 
					return newUrl ; 
				} else {
					return currentUrl.replace("page-num=" + this.pageNum , "page-num=" + pgNum);
				}
      	}
         , generatePageSize: function (pgSize) {
            var currentUrl = window.location.href ; 
            if ( currentUrl.indexOf("page-size=") === -1 ) {
               var newUrl = currentUrl + "&page-size=" + pgSize ; 
               return newUrl ; 
            } else {
               return currentUrl
                  .replace("page-size=" + this.pageSize , "page-size=" + pgSize) 
                  .replace("page-num=" + this.pageNum , "page-num=1");
            }
         }
         , fetchServerSideDataToUI: function(url_params) {

            if ( typeof url_params === "undefined" ) { url_params = this.getUrlParams()  }

            this.fetchServerSideData(url_params)
            .then( data => {
               var dataType = (typeof data)
               if ( dataType === 'undefined' ) {
                  var msg = 'unexpected error occurred while fetching data !!!'
                  setSpnMsgErrorText(data)
               } else if ( dataType === 'string' ) {
                  setSpnMsgErrorText(data)
               } else {
                  this.gridData = data.dat ; 
                  var totalRSsize = data.met ; 
                  this.pageSize = (typeof url_params.get('page-size') === 'undefined') ? 5 : url_params.get('page-size');
                  this.pageNum = (typeof url_params.get('page-num') === 'undefined') ? 1 : url_params.get('page-num');
                  var remainder = totalRSsize % this.pageSize
                  var toAdd = 1 // page-size 10 , total-rs-size 30 => 3 and not 4
                  if ( remainder == 0 ) { toAdd = 0  }
                  this.pagesCount = Math.floor(totalRSsize/this.pageSize ) + toAdd
                  var oa = (typeof url_params.get('oa') === 'undefined') ? 'id' : url_params.get('oa') ;

                  if ( oa !== null ) {
                     this.$children[0].setAscSortBy( oa ) ; 
                  } else if ( typeof url_params.get("od") != 'undefined' ) {
                     var od = url_params.get("od")
                     this.$children[0].setDescSortBy( od ) ; 
                  } else {
                     this.$children[0].setAscSortBy("id")
                  }
               }
            })
            .catch(function(error) {
               if (typeof error !== 'undefined') {
                 var errMsg = error.toString() 
                 setSpnMsgErrorText(errMsg);
               } else {
                 var msg = 'unexpected error occurred while fetching data !!!'
                 setSpnMsgErrorText(msg)
               }
            }) 
	  	   }
	      , postNewServerSideId: function (dbid){
            return axios.post('/<%= $db =%>/create/<%= $item =%>', {
             id: dbid
            })
            .then(function (response) { 
               return response ;
            })
            .catch(function (error) {
               if (typeof error !== 'undefined') {
                 var errMsg = error.response.data.msg
                 throw new Error(errMsg);
               }
            });
         }
         , createNewItem: function (dbid) {
            this.postNewServerSideId(dbid)
            .then ( result => {
               if ( result.toString() !== "Error: Request failed with status code 409" ) {
                  var url_params = this.getUrlParams();
                  var deletables = ["page-num", "page-size", "od", "oa", "with", "like-by", "like-val"];
                  for(var kv of url_params.entries()) { 
                     if ( deletables.indexOf(kv[0]) >= 0 ) {
                        url_params.delete(kv[0].toString()) ; 
                     }
                  }
                  url_params.set("od" , "id");
                  url_params.set("page-size" , this.pageSize);
                  url_params.set("page-num" , 1);
                  this.fetchServerSideDataToUI(url_params); 
                  var queryStr = ""
                  for(var kv of url_params.entries()) { queryStr = queryStr + kv[0]+ '='+ kv[1] + '&'; }
                  window.location.href = window.location.href.split('?')[0] + '?' + queryStr.slice(0, - 1)
               } else {
                  var msg = result.toString(); 
                  msg = msg + ". Somebody was faster than you in the second you clicked !"
                  msg = msg + " Retry once again."
                  setSpnMsgErrorText( msg ) ;
               }
            })				
            .catch(function (error) {
                  setSpnMsgErrorText(error.toString());
                  setSpnMsgErrorText(error.message);
            });

         }
         , updateItem: function (content,id,oldValue) {
            var arr = id.split('-')
            var col = arr[0]
            var dbid = arr[1]
            var ret = 1
         
            if ( content.trim() === "" ) { content = "null" } //empty cell is treated as null

            axios.post('/<%= $db =%>/update/<%= $item =%>', {
                  attribute: col ,
                  id: dbid , 
                  cnt: content.trim()
            })
            .then( 
               response => {
                  document.getElementById(id).innerHTML= content
                  newCntIndx = this.gridData.findIndex(obj => obj.id == dbid);
                  this.gridData[newCntIndx][col] = content; // it-180920075303 !!!
                  // oldCntIndx = this.gridData.findIndex(obj => obj[col] == oldValue);
                  // this.gridData[oldCntIndx][col] = oldValue; // it-180920075303 !!!
               }
            )
            .catch(function (error) {
               document.getElementById(id).innerHTML= oldValue
               if (typeof error !== 'undefined') {
                 var errMsg = error.response.data.msg
                 setSpnMsgErrorText(errMsg);
               }
            });
          }
          , deleteItem (id) {
               var arr = id.split('-')
               var dbid = arr[2]
               
               axios.post('/<%= $db =%>/delete/<%= $item =%>', {
                     id: dbid 
               })
               .then( 
                  response => {
                     var url_params = this.getUrlParams();
                     if ( typeof this.$children[0].pageSize !== "undefined" ) {
                        url_params.delete("page-size") ; 
                        url_params.set("page-size", this.$children[0].PageSize ) ;
                     }
                     if ( typeof this.$children[0].pageNum !== "undefined" ) {
                        url_params.delete("page-num") ; 
                        url_params.set("page-num", this.$children[0].pageNum ) ;
                     }
                     if ( typeof this.$children[0].sortKey !== "undefined" ) {
                        var key = this.$children[0].sortKey ; 
                        url_params.delete("oa") ; 
                        url_params.delete("od") ; 
                        if ( this.$children[0].sortOrders[key] === 1 ) {
                           url_params.set("oa", this.$children[0].sortKey.trim()) ;
                        } else {
                           url_params.set("od", this.$children[0].sortKey.trim() ) ;
                        }
                     }
                     url_params.delete("page-num") ; 
                     url_params.delete("page-size") ; 
                     url_params.set("page-size" , this.pageSize);
                     url_params.set("page-num" , this.pageNum);
                     this.fetchServerSideDataToUI(url_params);
                  }
               )
               .catch(function (error) {
                  setSpnMsgErrorText(error.message);
               });
          }
     }
     , mounted() {
	      this.fetchServerSideDataToUI();
         bus.$on('searchBoxInputChanged',this.onSearchBoxInputChanged)
	  }
   });
