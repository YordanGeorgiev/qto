   var gruds_crid = new Vue({
     el: '#cruds-grid',
     data: {
       globalSrch: '',
       gridColumns: <%== $list_control =%>,
       gridData: [],
       pageSize: 7,
       pageNum: 1,
       pagesCount: 0,
       UrlParams:{ as:"grid" },
       pageSizes: ['5', '7', '10','15','20','30','50','100']
         , searchInputChanged: ""
		},
     	methods: {
        onSearchBoxInputChanged: function(quickSrch) {
            this.globalSrch = quickSrch ; 
        } 
      , inpQuickSrchCH: function(event) {
           if ( event ) {
               if ( document.getElementById("inp_srch_box").value !== "" ) {
                  document.getElementById("btnNew").setAttribute( 
                     "class" , "v-btn v-btn--floating theme--dark silver");
               } else {
                  document.getElementById("btnNew").setAttribute( 
                     "class" , "v-btn v-btn--floating theme--dark indigo");
               }
           } 
         }
         , getUrlParams: function (){
            var url_params = new URLSearchParams();
            if( window.location.toString().indexOf("?") != -1) {
               var href_part = window.location.search.split('?')[1].split('#')[0]
               href_part.replace("pick=","pick=id,").replace('id,id','id').replace(/([^=&]+)=([^&]*)/g, 
                  function(m, key, value) {
                     var attr = decodeURIComponent(key)
                     var val = decodeURIComponent(value)
                     url_params.append(attr,val);
               });
            } 
            
            if ( url_params.has("od") === false) { url_params.append("od" , "id"); }
            if ( url_params.has("as") === false) { url_params.append("as" , "grid"); }
            if ( url_params.has("page-size") === false) { url_params.append("page-size" , 7); }
            if ( url_params.has("page-num") === false) { url_params.append("page-num" , 1); }
            
            //debug for(var pair of url_params.entries()) { consolas.log(pair[0]+ '->'+ pair[1]); }
            return url_params ; 
         }
	      , fetchServerSideData: function (url_params){
            if ( typeof url_params === "undefined" ) { url_params = this.getUrlParams()  }

            return axios.get((window.location.pathname).replace("/list/" , "/select/") , { params: url_params } )
            .then(response => { 
               return response.data ; 
            })
            .catch(function(error) {
               return error.response.data.msg ; 
            }) 
         }
         , generatePageSize: function (pgSize) {
               var curi = window.location.href ; 
               if ( typeof pgSize === 'undefined' ) { pgSize = 7 }
               if ( curi.indexOf("page-size=") === -1 ) {
                  return curi + "&page-size=" + pgSize ; 
               } else {
                  return curi
                     .replace("page-size=" + this.pageSize , "page-size=" + pgSize) 
                     .replace("page-num=" + this.pageNum , "page-num=1");
               }
         }
         , fetchServerSideDataToUI: function(url_params) {

               if ( typeof url_params === "undefined" ) { url_params = this.getUrlParams()  }

               this.fetchServerSideData(url_params)
               .then( data => {
                  var dataType = (typeof data)
                  if ( dataType === 'undefined' ) {
                     var msg = 'unexpected error occurred while fetching data !!!'
                     setMsgVisuals(data)
                  } else if ( dataType === 'string' ) {
                     setMsgVisuals(data)
                  } else {
                     this.gridData = data.dat ; 
                     var totalRSsize = data.met ; 
                     this.pageSize = url_params.get('page-size');
                     this.pageNum = url_params.get('page-num');
                     var remainder = totalRSsize % this.pageSize
                     var toAdd = 1 // page-size 10 , total-rs-size 30 => 3 and not 4
                     if ( remainder == 0 ) { toAdd = 0  }
                     this.pagesCount = Math.floor(totalRSsize/this.pageSize ) + toAdd
                     var oa = (typeof url_params.get('oa') === 'undefined') ? 'id' : url_params.get('oa') ;

                     if ( oa !== null ) {
                        this.$children[0].setAscSortBy( oa ) ; 
                     } else if ( typeof url_params.get("od") != 'undefined' ) {
                        var od = url_params.get("od")
                        this.$children[0].setDescSortBy( od ) ; 
                     } else {
                        this.$children[0].setAscSortBy("id")
                     }
                  }
               })
               .catch(function(error) {
                  if (typeof error !== 'undefined') {
                    var errMsg = error.toString() 
                    setMsgVisuals(errMsg);
                  } else {
                    var msg = 'unexpected error occurred while fetching data !!!'
                    setMsgVisuals(msg)
                  } 
               }) 
	  	   }
	      , postNewServerSideId: function (dbid){
               return axios.post('/<%= $db =%>/create/<%= $item =%>', {
                id: dbid
               })
               .then(function (response) { 
                  return response ;
               })
               .catch(function (error) {
                  if (typeof error !== 'undefined') {
                    var errMsg = error.response.data.msg
                    throw new Error(errMsg);
                  }
               });
         }
         , createNewItem: function (dbid) {
               this.postNewServerSideId(dbid)
               .then ( result => {
                  if ( result.toString() !== "Error: Request failed with status code 409" ) {
                     var url_params = this.getUrlParams();
                     var deletables = ["page-num", "page-size", "od", "oa", "with", "like-by", "like-val"];
                     for(var kv of url_params.entries()) { 
                        if ( deletables.indexOf(kv[0]) != -1 ) {
                           url_params.delete(String(kv[0])) ; 
                        }
                     }
                     url_params.set("od" , "id");
                     url_params.set("page-size" , "7");
                     url_params.set("page-num" , 1);
                     this.fetchServerSideDataToUI(url_params); 
                     var queryStr = ""
                     for(var kv of url_params.entries()) { queryStr = queryStr + kv[0]+ '='+ kv[1] + '&'; }
                     var newUri = window.location.href.split('?')[0] + '?' + queryStr.slice(0, - 1)
                     newUri = newUri.replace(/&oa=([a-zA-Z_]+)/gi , "") 
                     newUri = newUri.replace(/&od=([a-zA-Z_]+)/gi , "") 
                     newUri = newUri.replace(/&with=([a-zA-Z_]+)/gi , "") 
                     newUri = newUri.replace(/&like-by=([a-zA-Z_]+)/gi , "") 
                     newUri = newUri.replace(/&like-val=([a-zA-Z_]+)/gi , "") 
                     window.location.href = newUri
                  } else {
                     var msg = result.toString(); 
                     msg = msg + ". Somebody was faster than you in the second you clicked !"
                     msg = msg + " Retry once again."
                     setMsgVisuals( msg ) ;
                  }
               })				
               .catch(function (error) {
                     setMsgVisuals(error.toString());
                     setMsgVisuals(error.message);
               });

         }
         , updateItem: function (content,id,oldValue) {
            var arr = id.split('-')
            var col = arr[0]
            var dbid = arr[1]
            var ret = 1
         
            if ( content.trim() === "" ) { content = "null" } //empty cell is treated as null
            
            axios.post('/<%= $db =%>/update/<%= $item =%>', {
                  attribute: col ,
                  id: dbid , 
                  cnt: content
            })
            .then( 
               response => {
                  document.getElementById(id).innerHTML= content
                  newCntIndx = this.gridData.findIndex(obj => obj.id == dbid);
                  this.gridData[newCntIndx][col] = content; // it-180920075303 , it-181011195040 !!!
               }
            )
            .catch(function (error) {
               document.getElementById(id).value= oldValue
               if (typeof error !== undefined ) {
                 var errMsg = error.response.data.msg
                 setMsgVisuals(errMsg);
               }
            });
          }
          , deleteItem (id) {
               var arr = id.split('-')
               var dbid = arr[2]
               var newCntIndx = this.gridData.findIndex(obj => obj.id == dbid);
               
               axios.post('/<%= $db =%>/delete/<%= $item =%>', {
                     id: dbid 
               })
               .then( 
                  response => {
                     if (newCntIndx > -1) {
                        this.gridData = this.gridData.splice(newCntIndx, 1)
                     }
                     var url_params = this.getUrlParams();
                     if ( typeof this.$children[0].pageSize !== "undefined" ) {
                        url_params.delete("page-size") ; 
                        url_params.set("page-size", this.$children[0].PageSize ) ;
                     }
                     if ( typeof this.$children[0].pageNum !== undefined ) {
                        url_params.delete("page-num") ; 
                        url_params.set("page-num", this.$children[0].pageNum ) ;
                     }
                     if ( typeof this.$children[0].sortKey !== "undefined" ) {
                        var key = this.$children[0].sortKey ; 
                        url_params.delete("oa") ; 
                        url_params.delete("od") ; 
                        if ( this.$children[0].sortOrders[key] === 1 ) {
                           url_params.set("oa", this.$children[0].sortKey.trim()) ;
                        } else {
                           url_params.set("od", this.$children[0].sortKey.trim() ) ;
                        }
                     }
                     url_params.delete("page-num") ; 
                     url_params.delete("page-size") ; 
                     url_params.set("page-size" , this.pageSize);
                     url_params.set("page-num" , this.pageNum);
                     this.fetchServerSideDataToUI(url_params);
                  }
               )
               .catch(function (error) {
                  setMsgVisuals(error.message);
               });
          }
         , goToNextPage: function (id) {
               var uri = window.location.href 
               if ( uri.indexOf("?") === -1 ) { uri = uri + '?' }
               if ( uri.indexOf("page-num=") === -1 ) {
                  uri = uri + "&page-num=1"
               } else {
                  var newPageNum = Number(this.pageNum)+1
                  if ( newPageNum > this.pagesCount ) { newPageNum = this.pagesCount }
                  uri = uri.replace("page-num=" + this.pageNum, "page-num=" + String(newPageNum))
               }
               window.location.href = uri 
         }
         , goToPrevPage: function (id) {
               var uri = window.location.href 
               if ( uri.indexOf("?") === -1 ) { uri = uri + '?' }
               if ( uri.indexOf("page-num=") === -1 ) {
                  uri = uri + "&page-num=1"
               } else {
                  var newPageNum = Number(this.pageNum)-1
                  if ( newPageNum < 1 ) { newPageNum = 1 }
                  uri = uri.replace("page-num=" + this.pageNum, "page-num=" + String(newPageNum))
               }
               window.location.href = uri 
         }
     }
     , mounted() {
	      this.fetchServerSideDataToUI();
         bus.$on('searchBoxInputChanged',this.onSearchBoxInputChanged)
	  }
   });
