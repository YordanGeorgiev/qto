% use utf8;
% layout 'site';

% content_for header_csss => begin
   <link rel="stylesheet" type="text/css" href="../../css/thme-blue/screen/controls/app_list_grid.css" />
   <link rel="stylesheet" media="print"  href="../../css/thme-blue/print/controls/app_list_grid.css" />
% end

   <div id="foo" >
		<!-- component template -->
		<script type="text/x-template" id="grid-template">
		  <table tabindex="1" style="clear:both">
			 <thead>
				<tr>
				  <th v-for="key in columns"
					 @click="sortBy(key)"
					 :class="{ active: sortKey == key }" tabindex="1" v-on:keyup.enter="sortBy(key)">
					 {{ key }}
					 <span class="arrow" :class="sortOrders[key] > 0 ? 'asc' : 'dsc'">
					 </span>
				  </th>
				</tr>
			 </thead>
			 <tbody>
				<tr v-for="(entry,index) in filteredData" :class="{cls_even: index % 2, cls_odd: !(index % 2)}">
				  <td v-for="key in columns">
                 <div v-if="key === 'id'">
                     {{entry[key]}}
                 </div>
                 <div v-else="key === 'id">
                     <editable :content="entry[key]" :id="key+'-'+entry.id" v-on:update="updateItem"></editable>
                 </div>
				  </td>
				</tr>
			 </tbody>
		  </table>
		</script>

		<div id="demo">
			<div id="div_frm_srch">
		  		<form id="frm_search">
			 		<input id="inp_srch_query" tabindex="1" name="query" v-model="searchQuery">
         
      <div class="pgr-bar pgr-border pgr-round" style="float:right;">
          <a class="pgr-bar-item pgr-button" v-for="(pgSize, index) in this.pageSizes" 
				v-bind:href="generatePageSize(pgSize)">
				<span v-if="pgSize == pageSize" style="background-color:#ddd;"> <strong>{{ pgSize }}</strong> </span>
				<span v-else="pgSize == pageSize">{{ pgSize }} </span>
			</a>
      </div>
		  		</form>
			</div>

		  <demo-grid
			 :data="gridData"
			 :columns="gridColumns"
			 :filter-key="searchQuery">
		  </demo-grid>

         <div class="pgr-show-inline-block">
            <div class="pgr-bar pgr-border pgr-round">
               <a tabindex="1" class="pgr-bar-item pgr-button" 
						v-for="(pgNum, index) in this.pagesCount" v-bind:href="generatePageNum(pgNum)">
						<span v-if="pgNum == pageNum" style="background-color:#ddd;"> <strong>{{ pgNum }}</strong> </span>
						<span v-else="pgNum == pageNum"> {{ pgNum }} </span>
               </a>
            </div>
         </div>

               </div>
            </div>

<script>
if ( document.getElementById("spn_msg") ) {
   // register the editable
   Vue.component('editable', {
     template: `
       <div v-bind:id="id" contenteditable="true" @blur="emitChange">
         {{ content }}
       </div>
     `,
     props: ['content','id'],
     methods: {
       emitChange (ev) {
         this.$emit('update', ev.target.textContent,ev.target.id)
       }
     }
   })
   // register the grid component
   Vue.component('demo-grid', {
     template: '#grid-template',
     props: {
       data: Array,
       columns: Array,
       filterKey: String
     },
     data: function () {
       var sortOrders = {}
       this.columns.forEach(function (key) {
         sortOrders[key] = 1
       })
       return {
         sortKey: '',
         sortOrders: sortOrders
       }
     },
     computed: {
       filteredData: function () {
         var sortKey = this.sortKey
         var filterKey = this.filterKey && this.filterKey.toLowerCase()
         var order = this.sortOrders[sortKey] || 1
         var data = this.data
         if (filterKey) {
           data = data.filter(function (row) {
             return Object.keys(row).some(function (key) {
               return String(row[key]).toLowerCase().indexOf(filterKey) > -1
             })
           })
         }
         if (sortKey) {
           data = data.slice().sort(function (a, b) {
             a = a[sortKey]
             b = b[sortKey] 
             if ( (!isNaN(parseFloat(a)) && isFinite(a)) && (!isNaN(parseFloat(b)) && isFinite(b)) ) {
               return (a-b) * order
             } else {
               return (a === b ? 0 : a > b ? 1 : -1) * order
             }
           })
         }
         return data
      }
     },
     filters: {
       capitalize: function (str) {
         return str.charAt(0).toUpperCase() + str.slice(1)
       }
     },
     methods: {
       sortBy: function (key) {
         this.sortKey = key
         this.sortOrders[key] = this.sortOrders[key] * -1
       },
       updateItem (content,id) {
         var arr = id.split('-')
         var col = arr[0]
         var dbid = arr[1]
         console.log ( {
                attribute: col ,
                id: dbid , 
                cnt: content.trim()
         }) ; 
        
         axios.post('/<%= $db =%>/update/<%= $item =%>', {
            attribute: col ,
            id: dbid , 
            cnt: content.trim()
            })
            .then(function (response) {
               console.log(response);
            })
            .catch(function (error) {
               console.log(error);
            });
       }
     }
   })


   var demo = new Vue({
     el: '#demo',
     data: {
       searchQuery: '',
       gridColumns: <%== $list_control =%>,
       gridData: [],
       pageSize: 15,
       pageNum: 1,
       pagesCount: 0,
       UrlParams:{ as:"table" },
       pageSizes: ['5', '7', '10','15','20','30','50','100']
     },
     methods: {
      generatePageNum: function (pgNum) {
			var currentUrl = window.location.href ; 
			if ( currentUrl.indexOf("page-num=") === -1 ) {
				var newUrl = currentUrl + "&page-num=" + pgNum ; 
				return newUrl ; 
			} else {
         	return currentUrl.replace("page-num=" + this.pageNum , "page-num=" + pgNum) ; 
			}
      },
      generatePageSize: function (pgSize) {
			var currentUrl = window.location.href ; 
			if ( currentUrl.indexOf("page-size=") === -1 ) {
				var newUrl = currentUrl + "&page-size=" + pgSize ; 
				return newUrl ; 
			} else {
         	return currentUrl
               .replace("page-size=" + this.pageSize , "page-size=" + pgSize) 
               .replace("page-num=" + this.pageNum , "page-num=1") ; 
			}
      }
     },
     mounted() {
			var url_params = {} 
         if( window.location.toString().indexOf("?") != -1) {
            window.location.search.split('?')[1].replace("pick=","pick=id,")
               .replace(/([^=&]+)=([^&]*)/g, function(m, key, value) {
               url_params[decodeURIComponent(key)] = decodeURIComponent(value);
            });
         } else {
            url_params = { as:"table" };  
         }
         this.UrlParams = url_params;
			axios.get((window.location.pathname).replace("/list/" , "/select/") , { params: url_params } )
			.then(response => { 
				this.gridData = response.data.dat ; 
				this.pageSize = url_params['page-size'] || 10 ; 
				this.pageNum = url_params['page-num'] || 1 ; 
            var totalRSsize = response.data.met ; 
            var remainder = totalRSsize % this.pageSize
            var toAdd = 1 // page-size 10 , total-rs-size 30 => 3 and not 4
            if ( remainder == 0 ) { toAdd = 0  }
				this.pagesCount = Math.floor(totalRSsize/this.pageSize ) + toAdd
			})
			.catch(function(error) {
				document.getElementById("div_msg").innerHTML="<span id=\"spn_err_msg\">" + error.response.data.msg + '</span>'
    		}) 
	  }
   });
}
</script>
