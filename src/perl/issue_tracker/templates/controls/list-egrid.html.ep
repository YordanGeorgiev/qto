% use utf8;
% layout 'site';

% content_for header_csss => begin
   <link rel="stylesheet" type="text/css" media="screen" href="../../themes/thme-blue/css/screen/controls/app_list_grid.css" />
   <link rel="stylesheet" type="text/css" media="print"  href="../../themes/thme-blue/css/print/controls/app_list_grid.css" />
% end

   <div id="dev_central_panel" >
		<script type="text/x-template" id="grid-template">
      <div id="div_grid_tmpl" style="overflow-x: auto;">
      	<btn-new id="btnNew" v-on:clickedBtnNew="createNewItem"></btn-new>
			<table id="egrid" tabindex="1" style="clear:both">
			 <thead>
				<tr><th></th>
				  <th v-for="key in columns"
					 @click="sortBy(key)"
					 :class="{ active: sortKey == key }" tabindex="1" v-on:keyup.enter="sortBy(key)" :id="'th-'+key">
					 {{ key }}
					 <span class="arrow" :class="sortOrders[key] > 0 ? 'asc' : 'dsc'">
					 </span>
				  </th>
				</tr>
			 </thead>
			 <tbody>
				<tr v-for="(entry,index) in filteredData" :class="{cls_even: index % 2, cls_odd: !(index % 2)}"><td tabindex="-1"><btn-del :id="'btn-del-'+entry['id']" v-on:clickedBtnDelete="deleteItem"></btn-del></td><td v-for="key in columns"><div v-if="key === 'id' || key === 'guid'" tabindex="1">{{entry[key]}}</div><div v-on:keyup.tab="this.document.execCommand('selectAll',false,null)" v-else><editable tabindex="1" :content.sync="entry[key]" :id="key+'-'+entry.id" v-on:update="updateItem"></editable></div></td></tr>
			 </tbody>
		  </table>
      </div>
		</script>

		<div id="cruds-grid" tabindex="-1">
			<div id="div_frm_srch">
		  		<form id="frm_search" v-on:submit.prevent>
			 		<input id="inp_quick_srch" tabindex="1" v-model="searchQuery" v-on:keydown.13="trapOnEnterDown($event)"/>
                  <div class="pgr-bar pgr-border pgr-round" style="float:right;padding-right:10%">
                      <a class="pgr-bar-item pgr-button" v-for="(pgSize, index) in this.pageSizes" 
                        v-bind:href="generatePageSize(pgSize)">
                        <span v-if="pgSize == pageSize" style="background-color:#ddd;"> <strong>{{ pgSize }}</strong> </span>
                        <span v-else="pgSize == pageSize">{{ pgSize }} </span>
                     </a>
                  </div>
		  		</form>
			</div>

		  <cruds-grid-sf
			 :data.sync="gridData"
			 :columns="gridColumns"
			 :filter-key="searchQuery">
		  </cruds-grid-sf>

         <div class="pgr-show-inline-block">
            <div class="pgr-bar pgr-border pgr-round">
               <a tabindex="1" class="pgr-bar-item pgr-button" 
						v-for="(pgNum, index) in this.pagesCount" v-bind:href="generatePageNum(pgNum)">
						<span v-if="pgNum == pageNum" style="background-color:#ddd;"> <strong>{{ pgNum }}</strong> </span>
						<span v-else="pgNum == pageNum"> {{ pgNum }} </span>
               </a>
            </div>
         </div>

      </div>
   </div>

<script>
   
   function getUrlParams(){
      var url_params = new URLSearchParams();
      if( window.location.toString().indexOf("?") != -1) {
         window.location.search.split('?')[1].split('#')[0].replace("pick=","pick=id,").replace(/([^=&]+)=([^&]*)/g, function(m, key, value) {
				var attr = decodeURIComponent(key)
				var val = decodeURIComponent(value)
				url_params.append(attr,val);
         });
      } else {
         url_params = { as:"etable" }; 
      }
      return url_params ; 
   }

 
	function fetchServerSideData(url_params){
			return axios.get((window.location.pathname).replace("/list/" , "/select/") , { params: url_params } )
			.then(response => { 
				return response.data ; 
			})
			.catch(function(error) {
            setSpnMsgErrorText(error.response.data.msg);
    		}) 
   }

	function postNewServerSideId(dbid){
		return axios.post('/<%= $db =%>/create/<%= $item =%>', {
			 id: dbid
		})
		.then(function (response) { 
         return response ;
		})
		.catch(function (error) {
			if (typeof error !== 'undefined') {
			  var errMsg = error.response.data.msg
           throw new Error(errMsg);
			}
		});
	}


   function setSpnMsgErrorText(txt){
      document.getElementById("div_msg").innerHTML="<span id=\"spn_err_msg\">" + txt + '</span>';
      document.getElementById("div_msg").style.display="inline";
      document.getElementById("div_msg").style['box-shadow'] = "0 0 10px red";   
      document.getElementById("div_msg").style['background-color'] = "#FFFF00";   
      fadeAwayDivMsg();
   }

   function fadeAwayDivMsg(){
      var div_msg_style = document.getElementById('div_msg').style; div_msg_style.opacity = 1; // fade the err msg
      (function fade(){(div_msg_style.opacity-=.1)<0?div_msg_style.display="none":setTimeout(fade,1550)})();
   }

if ( document.getElementById("spn_msg") ) {
	
	Vue.component('btn-del', {
	  data: function () {
		 return {
			count: 0
		 }
	  },
	  methods: {
       clickedDelete: function(ev) {
			console.log ( "clickedDelete id clicked " + ev.currentTarget.id.toString())
         this.$emit('clickedBtnDelete', ev.currentTarget.id)
       }
	  },
	  template: `<v-btn flat icon color="grey" v-on:click="clickedDelete($event)"><v-icon dark>delete</v-icon></v-btn>` 
	})

	Vue.component('btn-new', {
	  data: function () {
		 return {
			count: 0
		 }
	  },
	  methods: {
			clickedBtnNew() {
				function pad2(n) { return n < 10 ? '0' + n : n }
				var date = new Date();
				var dbid = date.getFullYear().toString().substr(2,3) + pad2(date.getMonth() + 1) + pad2( date.getDate()) + pad2( date.getHours() ) + pad2( date.getMinutes() ) + pad2( date.getSeconds() );
				this.$emit('clickedBtnNew',dbid)
			}
	  },
	  template: `<v-btn fab dark color="indigo" v-on:click="clickedBtnNew()">
				  <v-icon dark>add</v-icon>
				</v-btn>` 
	})


   Vue.component('editable', {
     template: `<div v-bind:id="id" class="cls_cnt_edtble" contenteditable="true" @blur="emitChange" 
               v-on:focus="focused" v-on:keyup.esc="revertChange()">{{ content }}</div>`,
     props: {
		content: {
			twoWay: true 
		}
		,id: {}
	  },
     data: "",
     watch: {
        content: function () {
        this.content === 'null' ? this.$el.innerText = "" : this.$el.innerText = this.content;
        /* todo:ysg
            if ( this.content === 'null' ) {
               this.$el.innerText = "";
            } else {
               this.$el.innerText = this.content;
            }
        */
        }
     },
     mounted() {
     	   // todo:ysg this.$el.innerText = this.content;
        this.content === 'null' ? this.$el.innerText = "" : this.$el.innerText = this.content;
     },
     methods: {
       focused(ev) {
         this.data = ev.target.textContent;
       }
       , emitChange (ev) {
			this.$emit('update', ev.target.innerText,ev.target.id,this.data)
			this.$forceUpdate();
       }
       , revertChange() {
     		this.$el.innerText = this.data ; 
       }
     }
   })

   Vue.component('cruds-grid-sf', {
     template: '#grid-template',
     props: {
       data: {type: Array, twoWay: true}
       , columns: Array
       , filterKey: String
     },
     data: function () {
       var sortOrders = {}
       this.columns.forEach(function (key) {
         sortOrders[key] = 1
       })
       return {
         sortKey: '',
         sortOrders: sortOrders
       }
     },
	  computed: {
		 filteredData: {		
			 get: function () {
				var sortKey = this.sortKey
				var filterKey = this.filterKey && this.filterKey.toLowerCase()
				var order = this.sortOrders[sortKey] || 1
				var data = this.data
				if (filterKey) {
				  data = data.filter(function (row) {
					 return Object.keys(row).some(function (key) {
						return String(row[key]).toLowerCase().indexOf(filterKey) > -1
					 })
				  })
				}
				if (sortKey) {
				  data = data.slice().sort(function (a, b) {
					 a = a[sortKey]
					 b = b[sortKey] 
					 if ( (!isNaN(parseFloat(a)) && isFinite(a)) && (!isNaN(parseFloat(b)) && isFinite(b)) ) {
						return (a-b) * order
					 } else {
						return (a === b ? 0 : a > b ? 1 : -1) * order
					 }
				  })
				}
				return data
			},
			set: function(data) {
				this.data = data
			}
		}
	  },
     filters: {
       capitalize: function (str) {
         return str.charAt(0).toUpperCase() + str.slice(1)
       }
     },
     methods: {
       sortBy: function (key) {
			//this.$parent.fetchServerSideDataToUI();
         this.sortKey = key
         this.sortOrders[key] = this.sortOrders[key] * -1
       }
       , setAscSortBy: function (key) {
         this.sortKey = key
         this.sortOrders[key] = 1 ; 
       }
		 , deleteItem(id){
       	this.$parent.deleteItem(id);
		 }
       , updateItem (content,id,oldValue) {
			this.$parent.updateItem(content,id,oldValue);
         var col = id.split('-')[0] 
       }
       , createNewItem (content,id,oldValue) {
			this.$parent.createNewItem(content,id,oldValue);
       }
      , generatePageNum: function (pgNum) {
			var currentUrl = window.location.href ; 
			if ( currentUrl.indexOf("page-num=") === -1 ) {
				var newUrl = currentUrl + "&page-num=" + pgNum ; 
				return newUrl ; 
			} else {
         	return currentUrl.replace("page-num=" + this.pageNum , "page-num=" + pgNum) ; 
			}
      }
      , generatePageSize: function (pgSize) {
			var currentUrl = window.location.href ; 
			if ( currentUrl.indexOf("page-size=") === -1 ) {
				var newUrl = currentUrl + "&page-size=" + pgSize ; 
				return newUrl ; 
			} else {
         	return currentUrl
               .replace("page-size=" + this.pageSize , "page-size=" + pgSize) 
               .replace("page-num=" + this.pageNum , "page-num=1") ; 
			}
      }
	 }
   })


   var gruds_crid = new Vue({
     el: '#cruds-grid',
     data: {
       searchQuery: '',
       gridColumns: <%== $list_control =%>,
       gridData: [],
       pageSize: 15,
       pageNum: 1,
       pagesCount: 0,
       UrlParams:{ as:"table" },
       pageSizes: ['5', '7', '10','15','20','30','50','100']
     },
     methods: {
      generatePageNum: function (pgNum) {
			var currentUrl = window.location.href ; 
			if ( currentUrl.indexOf("page-num=") === -1 ) {
				var newUrl = currentUrl + "&page-num=" + pgNum ; 
				return newUrl ; 
			} else {
         	return currentUrl.replace("page-num=" + this.pageNum , "page-num=" + pgNum) ; 
			}
      }
      , generatePageSize: function (pgSize) {
			var currentUrl = window.location.href ; 
			if ( currentUrl.indexOf("page-size=") === -1 ) {
				var newUrl = currentUrl + "&page-size=" + pgSize ; 
				return newUrl ; 
			} else {
         	return currentUrl
               .replace("page-size=" + this.pageSize , "page-size=" + pgSize) 
               .replace("page-num=" + this.pageNum , "page-num=1") ; 
			}
     }
     , fetchServerSideDataToUI: function() {
			var url_params = getUrlParams();
			fetchServerSideData(url_params)
			.then( data => {
				this.gridData = data.dat ; 
				this.pageSize = url_params.get('page-size') || 10 ; 
				this.pageNum = url_params.get('page-num') || 1 ; 
				var totalRSsize = data.met ; 
				var remainder = totalRSsize % this.pageSize
				var toAdd = 1 // page-size 10 , total-rs-size 30 => 3 and not 4
				if ( remainder == 0 ) { toAdd = 0  }
				this.pagesCount = Math.floor(totalRSsize/this.pageSize ) + toAdd
				//this.$children.map(obj=>obj.$forceUpdate());
			})
			.catch(function(error) {
				setSpnMsgErrorText(error.response.data.msg);
				throw new Error('error.toString'); 
			}) 
	  	}
      , createNewItem (dbid) {
			postNewServerSideId(dbid)
			.then ( result => {
            if ( result.toString() !== "Error: Request failed with status code 409" ) {
               var url_params = getUrlParams();
					["like-by","like-val","with","fltr-by","fltr-val"].forEach(function(p){url_params.delete(p)})
					url_params.delete("with"); url_params.append("with" , "id-eq-" + dbid );
               fetchServerSideData(url_params).then( data => {
                  this.$children[0].data.push ( data.dat[0] );
						if ( this.$children[0].sortOrders["id"] === -1 ) { this.$children[0].setAscSortBy("id"); }
						document.getElementById("th-id").click() ; // simulate click to show the newest at the top 
               })
               .catch(function (error) {
                  setSpnMsgErrorText(error.message);
               });
            } else {
               var msg = result.toString(); 
               msg = msg + ". Somebody was faster than you in the second you clicked !"
               msg = msg + " Retry once again."
				   setSpnMsgErrorText( msg ) ;
            }
			})				
			.catch(function (error) {
				setSpnMsgErrorText(error.message);
			});
      }
      , updateItem (content,id,oldValue) {
         var arr = id.split('-')
         var col = arr[0]
         var dbid = arr[1]
		
			if ( !content.trim() ) { 
				content = "null"
			}
			axios.post('/<%= $db =%>/update/<%= $item =%>', {
					attribute: col ,
					id: dbid , 
					cnt: content.trim()
			})
			.then( 
				response => {
               objIndex = this.gridData.findIndex(obj => obj.id == dbid);
               this.gridData[objIndex][col] = content;
				}
			)
			.catch(function (error) {
				setSpnMsgErrorText(error.message);
				document.getElementById(id).innerHTML= oldValue
			});
       }
       , deleteItem (id) {
         var arr = id.split('-')
         var dbid = arr[2]
			
			console.log ( " the id is : " + id.toString() ) 	
				axios.post('/<%= $db =%>/delete/<%= $item =%>', {
						id: dbid 
				})
				.then( 
					response => {
						// question: why it does not work client-side only ?!
						this.fetchServerSideDataToUI()
					}
				)
				.catch(function (error) {
					setSpnMsgErrorText(error.message);
				});
       }
		, trapOnEnterDown(event){
			console.log("prevent default")
        if (event) event.preventDefault();
        if (event) event.stopPropagation();
    	}
     }
     , mounted() {
		this.fetchServerSideDataToUI();
	  }
   });
}

</script>
