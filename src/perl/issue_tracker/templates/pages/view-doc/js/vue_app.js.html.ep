   var state = {
      items: []
      , showSnackBar: false
      , showContextMenu: false
      , msg : ''
      , infinity: false
      , showRgtMenu: false
      , cid : null
    };

   var getters = {
      getItems: state => state.items
      , getSnackBarShow: state => state.showSnackBar
      , getContextMenu: state => state.showContextMenu
      , getSnackBarMsg: state => state.msg
      , getSnackBarInfinity: state => state.infinity
      , getRgtMenuShow: state => state.showRgtMenu
   }

    var mutations = {
           ADD_ITEM: (state, payload) => {
               var newItem = {
                   id: payload.newId,
                   name: payload.name,
                   completed: false
               }
               state.items.unshift(newItem);
           },
           SET_ITEMS: (state, items) => {
               state.items = items
           },
           SET_SNACKBAR_SHOW: (state, showSnackBar) => {
               state.showSnackBar = showSnackBar
           },
           SET_CONTEXT_MENU_SHOW: (state, showContextMenu, id) => {
               state.showContextMenu = showContextMenu
               state.cid = id
           },
           SET_SNACKBAR_MSG: (state, msg) => {
               state.msg = msg
           },
           SET_SNACKBAR_INFINITY: (state, infinity) => {
               state.infinity = infinity
           },
           SET_RGT_MENU_SHOW: (state, showRgtMenu) => {
               state.showRgtMenu = showRgtMenu
           },
           TOGGLE_ITEM: (state, payload) => {
               var item = state.items.find(item => item.id === payload);
               item.completed = !item.completed;
           },
           DELETE_ITEM: (state, payload) => {
               var index = state.items.findIndex(item => item.id === payload);
               state.items.splice(index, 1);
           }
    };

    var actions = {
         loadItems ({ commit }) {
            var url_params = getUrlParams()  
				var url = (window.location.pathname).replace("/view/" , "/hselect/")
            getServerData(url , url_params)
            .then( response => {
               if ( response.status === 204 ) {
                  var warningMsg = response.statusText
                  console.warn ( warningMsg ) 
                  commit('SET_ITEMS', [] )
                  commit('SET_SNACKBAR_MSG', warningMsg ) 
                  commit('SET_SNACKBAR_SHOW', true)
               } else if ( response.status === 404 || response.status === 400) {
                  var errorMsg = response.statusText + ": " + response.data.msg
                  commit('SET_SNACKBAR_MSG', errorMsg ) 
                  commit('SET_SNACKBAR_SHOW', true )
                  commit('SET_ITEMS', [] )
                  console.error( errorMsg ) 
               } else {
                  var data = response.data
                  var dataType = (typeof data)
                  if ( dataType === 'undefined' ) {
                     var errorMsg = 'unexpected error occurred while fetching data !!!'
                     console.error( errorMsg ) 
                  	commit('SET_SNACKBAR_SHOW', true)
                  	commit('SET_SNACKBAR_MSG', errorMsg ) 
                  } else {
                  	items = data.dat 
                     var isNotAPrintDoc = ( document.location.search.indexOf('as=print-doc')<=0 ? true : false )
                  	commit('SET_RGT_MENU_SHOW', isNotAPrintDoc )
                  	commit('SET_ITEMS', items)
                  	commit('SET_SNACKBAR_SHOW', false)
						}
					}
				})
         }
         , loadSnackBar: (context, showSnackBar) => {
            context.commit('SET_SNACKBAR_SHOW', showSnackBar)
         }
         , loadContextMenu: (context, showContextMenu,id) => {
            context.commit('SET_CONTEXT_MENU_SHOW', showContextMenu, id)
         }
         , loadSnackBarMsg: (context, msg) => {
            context.commit("SET_SNACKBAR_MSG", msg)
         }
         , loadSnackBarInfinity: (context, infinity) => {
            context.commit("SET_SNACKBAR_INFINITY", infinity)
         }
         , loadRgtMenuShow: (context, showRgtMenu) => {
            context.commit("SET_RGT_MENU_SHOW", showRgtMenu)
         }
         , hideSnackBar ({ commit }) {
            commit('SET_SNACKBAR_SHOW', false )
         }
         , showContextMenu (context,payload) {
            var e = payload ; 
            var id = String(e.target.id).split('-')[1]
            e.preventDefault();
            if ( typeof ( id ) == "undefined" ) return
            var menu = document.getElementById("div-context-menu");
            menu.style.left = e.pageX + 'px'
            menu.style.top = e.pageY + 'px'
            menu.style.display = 'block'
            menu.style.zIndex = 100
            menu.cid = id
            context.commit('SET_CONTEXT_MENU_SHOW', true , id)
         }
         , addItem: (context, payload) => {
            context.commit("ADD_ITEM", payload)
         }
         , toggleItem: (context, payload) => {
            context.commit("TOGGLE_ITEM", payload)
         }
         , deleteItem: (context, payload) => {
            context.commit("DELETE_ITEM", payload)
         }
   }

    var store = new Vuex.Store({
           state: state,
           getters: getters,
           mutations: mutations,
           actions: actions
       });


   const app = new Vue({
      store: store
      , el: "#view_app"
      , template: "#app-template"
      , components: {
           'view-doc-items-list': ViewDocItemsList
         , 'snackbar': SnackBar
         , 'context-menu': ContextMenu
      }
		, computed: {
         cshowSnackBar: {
				get: function() {
					return this.$store.getters.getSnackBarShow ;
				}
				, set: function(newVal) {
         		this.$store.dispatch("loadSnackBar", newVal);
				}
         }
         , cshowContextMenu: {
				get: function() {
					return this.$store.getters.getContextMenu ;
				}
				, set: function(newVal,id) {
         		this.$store.dispatch("loadContextMenu", newVal, id);
				}
         }
			, cinfinity: {
				get: function(){
					return this.$store.getters.getSnackBarInfinity
				}
				, set: function(newVal){
         		this.$store.dispatch("loadSnackBarInfinity", newVal);
				}
			}
			, cRgtMenuShow: {
				get: function(){
					return this.$store.getters.getRgtMenuShow
				}
				, set: function(newVal){
					this.rgt_menu_show = newVal
         		this.$store.dispatch("loadRgtMenuShow", newVal);
				}
			}
		}
      , data: () => ({
         position: 'top-center'
         , ctimeout: 3900
      })
      , created: function () {
         this.$store.dispatch('loadItems')
         this.$store.dispatch("loadContextMenu", false, 0);
         this.$store.dispatch("loadSnackBar");
         this.$store.dispatch("loadSnackBarInfinity", false);
         this.$store.dispatch("loadRgtMenuShow", false);
      }
      , methods: {
           addItem: function() {
               this.$store.dispatch("addItem", this);
               this.newId ++;
               this.name = "";
           }
           , hideSnackBar: function() {
               this.$store.dispatch("hideSnackBar", this);
               this.$store.dispatch("loadSnackBarInfinity", false);
           }
         , showContextMenu: function (e,id) {
            this.$store.dispatch("showContextMenu",e,id);
         }
     }
   });

   function openRightMenu() {
     document.getElementById("rgt_menu").style.width = "27%";
   }

   function closeRightMenu() {
     document.getElementById("rgt_menu").style.width = "0";
   }
